#pragma once

#include "il2cpp.h"

void System_Threading_CancellationTokenSource__LinkedTokenCancelDelegate (Il2CppObject* source, const MethodInfo* method_info);
bool System_Threading_CancellationTokenSource__get_IsCancellationRequested (System_Threading_CancellationTokenSource_o* __this, const MethodInfo* method_info);
bool System_Threading_CancellationTokenSource__get_IsCancellationCompleted (System_Threading_CancellationTokenSource_o* __this, const MethodInfo* method_info);
bool System_Threading_CancellationTokenSource__get_IsDisposed (System_Threading_CancellationTokenSource_o* __this, const MethodInfo* method_info);
void System_Threading_CancellationTokenSource__set_ThreadIDExecutingCallbacks (System_Threading_CancellationTokenSource_o* __this, int32_t value, const MethodInfo* method_info);
int32_t System_Threading_CancellationTokenSource__get_ThreadIDExecutingCallbacks (System_Threading_CancellationTokenSource_o* __this, const MethodInfo* method_info);
System_Threading_CancellationToken_o System_Threading_CancellationTokenSource__get_Token (System_Threading_CancellationTokenSource_o* __this, const MethodInfo* method_info);
bool System_Threading_CancellationTokenSource__get_CanBeCanceled (System_Threading_CancellationTokenSource_o* __this, const MethodInfo* method_info);
System_Threading_CancellationCallbackInfo_o* System_Threading_CancellationTokenSource__get_ExecutingCallback (System_Threading_CancellationTokenSource_o* __this, const MethodInfo* method_info);
void System_Threading_CancellationTokenSource___ctor (System_Threading_CancellationTokenSource_o* __this, const MethodInfo* method_info);
void System_Threading_CancellationTokenSource___ctor (System_Threading_CancellationTokenSource_o* __this, bool set, const MethodInfo* method_info);
void System_Threading_CancellationTokenSource__Cancel (System_Threading_CancellationTokenSource_o* __this, const MethodInfo* method_info);
void System_Threading_CancellationTokenSource__Cancel (System_Threading_CancellationTokenSource_o* __this, bool throwOnFirstException, const MethodInfo* method_info);
void System_Threading_CancellationTokenSource__TimerCallbackLogic (Il2CppObject* obj, const MethodInfo* method_info);
void System_Threading_CancellationTokenSource__Dispose (System_Threading_CancellationTokenSource_o* __this, const MethodInfo* method_info);
void System_Threading_CancellationTokenSource__Dispose (System_Threading_CancellationTokenSource_o* __this, bool disposing, const MethodInfo* method_info);
void System_Threading_CancellationTokenSource__ThrowIfDisposed (System_Threading_CancellationTokenSource_o* __this, const MethodInfo* method_info);
void System_Threading_CancellationTokenSource__ThrowObjectDisposedException (const MethodInfo* method_info);
System_Threading_CancellationTokenSource_o* System_Threading_CancellationTokenSource__InternalGetStaticSource (bool set, const MethodInfo* method_info);
System_Threading_CancellationTokenRegistration_o System_Threading_CancellationTokenSource__InternalRegister (System_Threading_CancellationTokenSource_o* __this, System_Action_object__o* callback, Il2CppObject* stateForCallback, System_Threading_SynchronizationContext_o* targetSyncContext, System_Threading_ExecutionContext_o* executionContext, const MethodInfo* method_info);
void System_Threading_CancellationTokenSource__NotifyCancellation (System_Threading_CancellationTokenSource_o* __this, bool throwOnFirstException, const MethodInfo* method_info);
void System_Threading_CancellationTokenSource__ExecuteCallbackHandlers (System_Threading_CancellationTokenSource_o* __this, bool throwOnFirstException, const MethodInfo* method_info);
void System_Threading_CancellationTokenSource__CancellationCallbackCoreWork_OnSyncContext (System_Threading_CancellationTokenSource_o* __this, Il2CppObject* obj, const MethodInfo* method_info);
void System_Threading_CancellationTokenSource__CancellationCallbackCoreWork (System_Threading_CancellationTokenSource_o* __this, System_Threading_CancellationCallbackCoreWorkArguments_o args, const MethodInfo* method_info);
System_Threading_CancellationTokenSource_o* System_Threading_CancellationTokenSource__CreateLinkedTokenSource (System_Threading_CancellationToken_o token1, System_Threading_CancellationToken_o token2, const MethodInfo* method_info);
void System_Threading_CancellationTokenSource__WaitForCallbackToComplete (System_Threading_CancellationTokenSource_o* __this, System_Threading_CancellationCallbackInfo_o* callbackInfo, const MethodInfo* method_info);
void System_Threading_CancellationTokenSource___cctor (const MethodInfo* method_info);
