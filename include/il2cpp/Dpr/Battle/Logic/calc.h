#pragma once

#include "il2cpp.h"

void Dpr_Battle_Logic_calc__BITFLG_Construction (System_Byte_array* flags, const MethodInfo* method_info);
void Dpr_Battle_Logic_calc__BITFLG_Set (System_Byte_array* flags, uint32_t index, const MethodInfo* method_info);
bool Dpr_Battle_Logic_calc__BITFLG_Check (System_Byte_array* flags, uint32_t index, const MethodInfo* method_info);
void Dpr_Battle_Logic_calc__BITFLG_Off (System_Byte_array* flags, uint32_t index, const MethodInfo* method_info);
uint32_t Dpr_Battle_Logic_calc__ABS (int32_t value, const MethodInfo* method_info);
void Dpr_Battle_Logic_calc__InitSys (Dpr_Battle_Logic_Random_o* randSys, bool bSakasaBtl, const MethodInfo* method_info);
void Dpr_Battle_Logic_calc__ResetSys (uint64_t randSeed, const MethodInfo* method_info);
void Dpr_Battle_Logic_calc__QuitSys (const MethodInfo* method_info);
Dpr_Battle_Logic_Random_o* Dpr_Battle_Logic_calc__GetRandGenerator (const MethodInfo* method_info);
int32_t Dpr_Battle_Logic_calc__TypeAff (uint8_t wazaType, uint8_t pokeType, const MethodInfo* method_info);
int32_t Dpr_Battle_Logic_calc__TypeAffMul (int32_t aff1, int32_t aff2, const MethodInfo* method_info);
int32_t Dpr_Battle_Logic_calc__TypeAffPair (uint8_t wazaType, Dpr_Battle_Logic_PokeTypePair_o pokeType, const MethodInfo* method_info);
uint8_t Dpr_Battle_Logic_calc__GetResistTypes (uint8_t type, System_Byte_array* dst, const MethodInfo* method_info);
uint32_t Dpr_Battle_Logic_calc__DamageBase (uint32_t wazaPower, uint32_t atkPower, uint32_t atkLevel, uint32_t defGuard, const MethodInfo* method_info);
uint32_t Dpr_Battle_Logic_calc__AffDamage (uint32_t rawDamage, int32_t aff, const MethodInfo* method_info);
uint32_t Dpr_Battle_Logic_calc__GetPublicRand (uint32_t range, const MethodInfo* method_info);
uint32_t Dpr_Battle_Logic_calc__GetRand (uint32_t range, const MethodInfo* method_info);
uint32_t Dpr_Battle_Logic_calc__RandRange (uint32_t min, uint32_t max, const MethodInfo* method_info);
uint32_t Dpr_Battle_Logic_calc__MulRatio (uint32_t value, int32_t ratio, const MethodInfo* method_info);
uint32_t Dpr_Battle_Logic_calc__MulRatio_OverZero (uint32_t value, int32_t ratio, const MethodInfo* method_info);
uint32_t Dpr_Battle_Logic_calc__MulRatioInt (uint32_t value, uint32_t ratio, const MethodInfo* method_info);
void Dpr_Battle_Logic_calc__MakeDefaultWazaSickCont (int32_t sick, Dpr_Battle_Logic_BTL_POKEPARAM_o* attacker, Dpr_Battle_Logic_BTL_SICKCONT_o* cont, const MethodInfo* method_info);
Dpr_Battle_Logic_BTL_SICKCONT_o Dpr_Battle_Logic_calc__MakeWazaSickCont_Poke (uint8_t pokeID, uint8_t causePokeID, const MethodInfo* method_info);
Dpr_Battle_Logic_BTL_SICKCONT_o Dpr_Battle_Logic_calc__MakeDefaultPokeSickCont (uint32_t sick, uint8_t causePokeID, bool isCantUseRand, const MethodInfo* method_info);
uint16_t Dpr_Battle_Logic_calc__StatusRank (uint16_t defaultVal, uint8_t rank, const MethodInfo* method_info);
uint32_t Dpr_Battle_Logic_calc__QuotMaxHP_Zero (Dpr_Battle_Logic_BTL_POKEPARAM_o* bpp, uint32_t denom, bool useBeforeGParam, const MethodInfo* method_info);
uint32_t Dpr_Battle_Logic_calc__QuotMaxHP (Dpr_Battle_Logic_BTL_POKEPARAM_o* bpp, uint32_t denom, bool useBeforeGParam, const MethodInfo* method_info);
uint8_t Dpr_Battle_Logic_calc__HitPer (uint8_t defPer, uint8_t rank, const MethodInfo* method_info);
bool Dpr_Battle_Logic_calc__CheckCritical (uint8_t rank, int32_t ratio, const MethodInfo* method_info);
int32_t Dpr_Battle_Logic_calc__ITEM_GetParam (uint16_t item, int32_t paramID, const MethodInfo* method_info);
bool Dpr_Battle_Logic_calc__ITEM_IsBall (uint16_t itemID, const MethodInfo* method_info);
bool Dpr_Battle_Logic_calc__ITEM_IsReriveItem (uint16_t itemID, const MethodInfo* method_info);
bool Dpr_Battle_Logic_calc__ITEM_IsMail (uint16_t item, const MethodInfo* method_info);
uint32_t Dpr_Battle_Logic_calc__PERSONAL_GetParam (int32_t mons_no, int32_t form_no, int32_t paramID, const MethodInfo* method_info);
uint32_t Dpr_Battle_Logic_calc__PERSONAL_GetMinExp (int32_t monsno, int32_t formno, uint8_t level, const MethodInfo* method_info);
bool Dpr_Battle_Logic_calc__PERSONAL_IsEvoCancelPokemon (int32_t mons_no, uint16_t formno, uint8_t level, const MethodInfo* method_info);
bool Dpr_Battle_Logic_calc__IsBasicSickID (int32_t sickID, const MethodInfo* method_info);
uint16_t Dpr_Battle_Logic_calc__RecvWeatherDamage (Dpr_Battle_Logic_BTL_POKEPARAM_o* bpp, uint8_t weather, const MethodInfo* method_info);
int32_t Dpr_Battle_Logic_calc__GetWeatherDmgRatio (uint8_t weather, uint8_t wazaType, const MethodInfo* method_info);
bool Dpr_Battle_Logic_calc__IsShineWeather (uint8_t weather, const MethodInfo* method_info);
bool Dpr_Battle_Logic_calc__IsRainWeather (uint8_t weather, const MethodInfo* method_info);
void Dpr_Battle_Logic_calc__WazaSickContToBppSickCont (Pml_WazaData_SickContParam_o wazaSickCont, Dpr_Battle_Logic_BTL_POKEPARAM_o* attacker, Dpr_Battle_Logic_BTL_SICKCONT_o* sickCont, const MethodInfo* method_info);
uint8_t Dpr_Battle_Logic_calc__HitCountStd (uint8_t numHitMax, const MethodInfo* method_info);
int32_t Dpr_Battle_Logic_calc__CheckMentalSick (Dpr_Battle_Logic_BTL_POKEPARAM_o* bpp, const MethodInfo* method_info);
int32_t Dpr_Battle_Logic_calc__TypeAffAbout (int32_t aff, const MethodInfo* method_info);
bool Dpr_Battle_Logic_calc__IsOccurPer (uint32_t per, const MethodInfo* method_info);
int32_t Dpr_Battle_Logic_calc__Roundup (int32_t value, int32_t min, const MethodInfo* method_info);
int32_t Dpr_Battle_Logic_calc__Rounddown (int32_t val, int32_t max, const MethodInfo* method_info);
int32_t Dpr_Battle_Logic_calc__RoundValue (int32_t val, int32_t min, int32_t max, const MethodInfo* method_info);
int32_t Dpr_Battle_Logic_calc__GetWazaTarget (int32_t waza, Dpr_Battle_Logic_BTL_POKEPARAM_o* attacker, const MethodInfo* method_info);
int32_t Dpr_Battle_Logic_calc__GetNoroiTargetType (Dpr_Battle_Logic_BTL_POKEPARAM_o* attacker, const MethodInfo* method_info);
uint8_t Dpr_Battle_Logic_calc__DecideWazaTargetAuto (Dpr_Battle_Logic_MainModule_o* mainModule, Dpr_Battle_Logic_POKECON_o* pokeCon, Dpr_Battle_Logic_BTL_POKEPARAM_o* bpp, int32_t waza, bool IsClient, const MethodInfo* method_info);
uint32_t Dpr_Battle_Logic_calc__PokeIDx6_Pack32bit (System_Byte_array* pokeIDList, const MethodInfo* method_info);
void Dpr_Battle_Logic_calc__PokeIDx6_Unpack32bit (uint32_t pack, System_Byte_array* pokeIDList, const MethodInfo* method_info);
bool Dpr_Battle_Logic_calc__is_include (Pml_WazaNo_array* tbl, uint32_t tblElems, int32_t wazaID, const MethodInfo* method_info);
int32_t Dpr_Battle_Logic_calc__RandWaza (Pml_WazaNo_array* omitWazaTbl, uint16_t tblElems, const MethodInfo* method_info);
uint8_t Dpr_Battle_Logic_calc__DecideWazaTargetAutoForClient (Dpr_Battle_Logic_MainModule_o* mainModule, Dpr_Battle_Logic_POKECON_o* pokeCon, Dpr_Battle_Logic_BTL_POKEPARAM_o* bpp, int32_t waza, uint64_t* pRandContextSaveWork, const MethodInfo* method_info);
bool Dpr_Battle_Logic_calc__RULE_IsNeedSelectTarget (int32_t rule, const MethodInfo* method_info);
uint8_t Dpr_Battle_Logic_calc__RULE_HandPokeIndex (int32_t rule, uint8_t numCoverPos, const MethodInfo* method_info);
uint32_t Dpr_Battle_Logic_calc__calcWinMoney_Sub (Dpr_Battle_Logic_BSP_TRAINER_DATA_o** trData, Pml_PokeParty_o** party, const MethodInfo* method_info);
uint32_t Dpr_Battle_Logic_calc__CalcWinMoney (Dpr_Battle_Logic_BATTLE_SETUP_PARAM_o* sp, const MethodInfo* method_info);
uint32_t Dpr_Battle_Logic_calc__CalcLoseMoney (Dpr_Battle_Logic_BATTLE_SETUP_PARAM_o* sp, Dpr_Battle_Logic_POKECON_o* pokeCon, const MethodInfo* method_info);
uint32_t Dpr_Battle_Logic_calc__CalcPenaltyMoney (uint32_t level_max, const MethodInfo* method_info);
void Dpr_Battle_Logic_calc___cctor (const MethodInfo* method_info);
