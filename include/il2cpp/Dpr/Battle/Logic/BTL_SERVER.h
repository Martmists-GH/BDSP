#pragma once

#include "il2cpp.h"

void Dpr_Battle_Logic_BTL_SERVER___ctor (Dpr_Battle_Logic_BTL_SERVER_o* __this, Dpr_Battle_Logic_MainModule_o* pMainModule, uint64_t randSeed, Dpr_Battle_Logic_BattleEnv_o* pBattleEnv, Dpr_Battle_Logic_SendDataContainer_o* pSendDataContainer, const MethodInfo* method_info);
void Dpr_Battle_Logic_BTL_SERVER__createBattleDriver (Dpr_Battle_Logic_BTL_SERVER_o* __this, const MethodInfo* method_info);
void Dpr_Battle_Logic_BTL_SERVER__createServerRequestGenerator (Dpr_Battle_Logic_BTL_SERVER_o* __this, const MethodInfo* method_info);
void Dpr_Battle_Logic_BTL_SERVER__AttachAdapter (Dpr_Battle_Logic_BTL_SERVER_o* __this, int32_t clientID, Dpr_Battle_Logic_Adapter_o* adapter, const MethodInfo* method_info);
void Dpr_Battle_Logic_BTL_SERVER__Startup (Dpr_Battle_Logic_BTL_SERVER_o* __this, const MethodInfo* method_info);
void Dpr_Battle_Logic_BTL_SERVER__StartupAsNewServer (Dpr_Battle_Logic_BTL_SERVER_o* __this, const MethodInfo* method_info);
bool Dpr_Battle_Logic_BTL_SERVER__IsWaitingClientReply (Dpr_Battle_Logic_BTL_SERVER_o* __this, const MethodInfo* method_info);
void Dpr_Battle_Logic_BTL_SERVER__CMDCHECK_RestoreActionData (Dpr_Battle_Logic_BTL_SERVER_o* __this, void* recData, uint32_t recDataSize, const MethodInfo* method_info);
void Dpr_Battle_Logic_BTL_SERVER__CMDCHECK_RestoreClientLimitTime (Dpr_Battle_Logic_BTL_SERVER_o* __this, Dpr_Battle_Logic_ServerSendData_CLIENT_LIMIT_TIME_o* syncData, const MethodInfo* method_info);
bool Dpr_Battle_Logic_BTL_SERVER__CMDCHECK_Make (Dpr_Battle_Logic_BTL_SERVER_o* __this, int32_t timingCode, void* recvedCmd, uint32_t recvedCmdSize, const MethodInfo* method_info);
bool Dpr_Battle_Logic_BTL_SERVER__MainLoop (Dpr_Battle_Logic_BTL_SERVER_o* __this, const MethodInfo* method_info);
bool Dpr_Battle_Logic_BTL_SERVER__updateSeq (Dpr_Battle_Logic_BTL_SERVER_o* __this, const MethodInfo* method_info);
void Dpr_Battle_Logic_BTL_SERVER__changeSequence (Dpr_Battle_Logic_BTL_SERVER_o* __this, uint8_t nextSeq, const MethodInfo* method_info);
void Dpr_Battle_Logic_BTL_SERVER__seq_BATTLE_START_SETUP (Dpr_Battle_Logic_BTL_SERVER_o* __this, int32_t* pSeqStep, uint8_t* pNextSeq, const MethodInfo* method_info);
void Dpr_Battle_Logic_BTL_SERVER__seq_BATTLE_START_SWITCH (Dpr_Battle_Logic_BTL_SERVER_o* __this, int32_t* pSeqStep, uint8_t* pNextSeq, const MethodInfo* method_info);
void Dpr_Battle_Logic_BTL_SERVER__seq_BATTLE_START_TIMING (Dpr_Battle_Logic_BTL_SERVER_o* __this, int32_t* pSeqStep, uint8_t* pNextSeq, const MethodInfo* method_info);
void Dpr_Battle_Logic_BTL_SERVER__seq_BATTLE_START_COMMAND (Dpr_Battle_Logic_BTL_SERVER_o* __this, int32_t* pSeqStep, uint8_t* pNextSeq, const MethodInfo* method_info);
void Dpr_Battle_Logic_BTL_SERVER__seq_BATTLE_START_RECORD (Dpr_Battle_Logic_BTL_SERVER_o* __this, int32_t* pSeqStep, uint8_t* pNextSeq, const MethodInfo* method_info);
void Dpr_Battle_Logic_BTL_SERVER__seq_BATTLE_START_SWITCH_AFTER_FIRST_POKEIN (Dpr_Battle_Logic_BTL_SERVER_o* __this, int32_t* pSeqStep, uint8_t* pNextSeq, const MethodInfo* method_info);
void Dpr_Battle_Logic_BTL_SERVER__seq_POKECHANGE_AFTERFIRSTPOKEIN_POKESELECT (Dpr_Battle_Logic_BTL_SERVER_o* __this, int32_t* pSeqStep, uint8_t* pNextSeq, const MethodInfo* method_info);
void Dpr_Battle_Logic_BTL_SERVER__seq_POKECHANGE_AFTERFIRSTPOKEIN_RECORD (Dpr_Battle_Logic_BTL_SERVER_o* __this, int32_t* pSeqStep, uint8_t* pNextSeq, const MethodInfo* method_info);
void Dpr_Battle_Logic_BTL_SERVER__seq_POKECHANGE_AFTERFIRSTPOKEIN_COMMAND (Dpr_Battle_Logic_BTL_SERVER_o* __this, int32_t* pSeqStep, uint8_t* pNextSeq, const MethodInfo* method_info);
void Dpr_Battle_Logic_BTL_SERVER__seq_POKECHANGE_AFTERFIRSTPOKEIN_SWITCH (Dpr_Battle_Logic_BTL_SERVER_o* __this, int32_t* pSeqStep, uint8_t* pNextSeq, const MethodInfo* method_info);
void Dpr_Battle_Logic_BTL_SERVER__seq_ACTION_SELECT_START (Dpr_Battle_Logic_BTL_SERVER_o* __this, int32_t* pSeqStep, uint8_t* pNextSeq, const MethodInfo* method_info);
void Dpr_Battle_Logic_BTL_SERVER__seq_ACTION_SELECT_SWITCH (Dpr_Battle_Logic_BTL_SERVER_o* __this, int32_t* pSeqStep, uint8_t* pNextSeq, const MethodInfo* method_info);
void Dpr_Battle_Logic_BTL_SERVER__seq_ACTION_SELECT_RECORD (Dpr_Battle_Logic_BTL_SERVER_o* __this, int32_t* pSeqStep, uint8_t* pNextSeq, const MethodInfo* method_info);
void Dpr_Battle_Logic_BTL_SERVER__seq_ACTION_SELECT_COMMAND (Dpr_Battle_Logic_BTL_SERVER_o* __this, int32_t* pSeqStep, uint8_t* pNextSeq, const MethodInfo* method_info);
void Dpr_Battle_Logic_BTL_SERVER__seq_ACTION_SELECT_COMMAND_SWITCH (Dpr_Battle_Logic_BTL_SERVER_o* __this, int32_t* pSeqStep, uint8_t* pNextSeq, const MethodInfo* method_info);
bool Dpr_Battle_Logic_BTL_SERVER__isPokeCoverEscapeMode (Dpr_Battle_Logic_BTL_SERVER_o* __this, const MethodInfo* method_info);
void Dpr_Battle_Logic_BTL_SERVER__seq_CHANGE_OR_ESCAPE_START (Dpr_Battle_Logic_BTL_SERVER_o* __this, int32_t* pSeqStep, uint8_t* pNextSeq, const MethodInfo* method_info);
void Dpr_Battle_Logic_BTL_SERVER__seq_CHANGE_OR_ESCAPE_SWITCH (Dpr_Battle_Logic_BTL_SERVER_o* __this, int32_t* pSeqStep, uint8_t* pNextSeq, const MethodInfo* method_info);
void Dpr_Battle_Logic_BTL_SERVER__seq_CHANGE_OR_ESCAPE_ESCAPE_SELECTED (Dpr_Battle_Logic_BTL_SERVER_o* __this, int32_t* pSeqStep, uint8_t* pNextSeq, const MethodInfo* method_info);
void Dpr_Battle_Logic_BTL_SERVER__seq_COVER_SELECT_START (Dpr_Battle_Logic_BTL_SERVER_o* __this, int32_t* pSeqStep, uint8_t* pNextSeq, const MethodInfo* method_info);
void Dpr_Battle_Logic_BTL_SERVER__seq_COVER_COMFIRM_PLAYER_POKECHANGE (Dpr_Battle_Logic_BTL_SERVER_o* __this, int32_t* pSeqStep, uint8_t* pNextSeq, const MethodInfo* method_info);
void Dpr_Battle_Logic_BTL_SERVER__seq_COVER_SELECT_SWITCH (Dpr_Battle_Logic_BTL_SERVER_o* __this, int32_t* pSeqStep, uint8_t* pNextSeq, const MethodInfo* method_info);
void Dpr_Battle_Logic_BTL_SERVER__seq_COVER_SELECT_RECORD (Dpr_Battle_Logic_BTL_SERVER_o* __this, int32_t* pSeqStep, uint8_t* pNextSeq, const MethodInfo* method_info);
void Dpr_Battle_Logic_BTL_SERVER__seq_COVER_COMMAND (Dpr_Battle_Logic_BTL_SERVER_o* __this, int32_t* pSeqStep, uint8_t* pNextSeq, const MethodInfo* method_info);
void Dpr_Battle_Logic_BTL_SERVER__seq_COVER_COMMAND_SWITCH (Dpr_Battle_Logic_BTL_SERVER_o* __this, int32_t* pSeqStep, uint8_t* pNextSeq, const MethodInfo* method_info);
bool Dpr_Battle_Logic_BTL_SERVER__irekae_IsNeedConfirm (Dpr_Battle_Logic_BTL_SERVER_o* __this, const MethodInfo* method_info);
uint8_t Dpr_Battle_Logic_BTL_SERVER__irekae_GetEnemyPutPokeID (Dpr_Battle_Logic_BTL_SERVER_o* __this, const MethodInfo* method_info);
void Dpr_Battle_Logic_BTL_SERVER__seq_INTERRUPT_POKECHANGE_POKESELECT (Dpr_Battle_Logic_BTL_SERVER_o* __this, int32_t* pSeqStep, uint8_t* pNextSeq, const MethodInfo* method_info);
void Dpr_Battle_Logic_BTL_SERVER__seq_INTERRUPT_POKECHANGE_POKESELECT_SWITCH (Dpr_Battle_Logic_BTL_SERVER_o* __this, int32_t* pSeqStep, uint8_t* pNextSeq, const MethodInfo* method_info);
void Dpr_Battle_Logic_BTL_SERVER__seq_INTERRUPT_POKECHANGE_RECORD (Dpr_Battle_Logic_BTL_SERVER_o* __this, int32_t* pSeqStep, uint8_t* pNextSeq, const MethodInfo* method_info);
void Dpr_Battle_Logic_BTL_SERVER__seq_INTERRUPT_POKECHANGE_COMMAND (Dpr_Battle_Logic_BTL_SERVER_o* __this, int32_t* pSeqStep, uint8_t* pNextSeq, const MethodInfo* method_info);
void Dpr_Battle_Logic_BTL_SERVER__seq_INTERRUPT_POKECHANGE_SWITCH (Dpr_Battle_Logic_BTL_SERVER_o* __this, int32_t* pSeqStep, uint8_t* pNextSeq, const MethodInfo* method_info);
void Dpr_Battle_Logic_BTL_SERVER__seq_TIMEUP_RECORD (Dpr_Battle_Logic_BTL_SERVER_o* __this, int32_t* pSeqStep, uint8_t* pNextSeq, const MethodInfo* method_info);
void Dpr_Battle_Logic_BTL_SERVER__seq_TIMEUP_COMMAND (Dpr_Battle_Logic_BTL_SERVER_o* __this, int32_t* pSeqStep, uint8_t* pNextSeq, const MethodInfo* method_info);
void Dpr_Battle_Logic_BTL_SERVER__seq_RAID_CAPTURE_START (Dpr_Battle_Logic_BTL_SERVER_o* __this, int32_t* pSeqStep, uint8_t* pNextSeq, const MethodInfo* method_info);
void Dpr_Battle_Logic_BTL_SERVER__seq_RAID_CAPTURE_SELECT_BALL (Dpr_Battle_Logic_BTL_SERVER_o* __this, int32_t* pSeqStep, uint8_t* pNextSeq, const MethodInfo* method_info);
void Dpr_Battle_Logic_BTL_SERVER__storeClientSendData_RaidBallSelect (Dpr_Battle_Logic_BTL_SERVER_o* __this, const MethodInfo* method_info);
void Dpr_Battle_Logic_BTL_SERVER__seq_RAID_CAPTURE_RESULT (Dpr_Battle_Logic_BTL_SERVER_o* __this, int32_t* pSeqStep, uint8_t* pNextSeq, const MethodInfo* method_info);
void Dpr_Battle_Logic_BTL_SERVER__checkRaidBossCaptureResult (Dpr_Battle_Logic_BTL_SERVER_o* __this, const MethodInfo* method_info);
void Dpr_Battle_Logic_BTL_SERVER__checkRaidBossCaptureResult (Dpr_Battle_Logic_BTL_SERVER_o* __this, Dpr_Battle_Logic_ServerSendData_RAIDBOSS_CAPTURE_RESULT_o* pResult, const MethodInfo* method_info);
void Dpr_Battle_Logic_BTL_SERVER__checkRaidBossCaptureResult (Dpr_Battle_Logic_BTL_SERVER_o* __this, Dpr_Battle_Logic_ServerSendData_RAIDBOSS_CAPTURE_RESULT_o* pResult, int32_t clientID, const MethodInfo* method_info);
void Dpr_Battle_Logic_BTL_SERVER__seq_RAID_EXIT_WIN (Dpr_Battle_Logic_BTL_SERVER_o* __this, int32_t* pSeqStep, uint8_t* pNextSeq, const MethodInfo* method_info);
void Dpr_Battle_Logic_BTL_SERVER__seq_RAID_EXIT_LOSE (Dpr_Battle_Logic_BTL_SERVER_o* __this, int32_t* pSeqStep, uint8_t* pNextSeq, const MethodInfo* method_info);
void Dpr_Battle_Logic_BTL_SERVER__seq_EXIT_COMMON (Dpr_Battle_Logic_BTL_SERVER_o* __this, int32_t* pSeqStep, uint8_t* pNextSeq, const MethodInfo* method_info);
void Dpr_Battle_Logic_BTL_SERVER__seq_EXIT_SWITCH (Dpr_Battle_Logic_BTL_SERVER_o* __this, int32_t* pSeqStep, uint8_t* pNextSeq, const MethodInfo* method_info);
void Dpr_Battle_Logic_BTL_SERVER__seq_EXIT_WILD_WIN (Dpr_Battle_Logic_BTL_SERVER_o* __this, int32_t* pSeqStep, uint8_t* pNextSeq, const MethodInfo* method_info);
void Dpr_Battle_Logic_BTL_SERVER__seq_EXIT_WILD_LOSE (Dpr_Battle_Logic_BTL_SERVER_o* __this, int32_t* pSeqStep, uint8_t* pNextSeq, const MethodInfo* method_info);
void Dpr_Battle_Logic_BTL_SERVER__seq_EXIT_WILD_FORCE (Dpr_Battle_Logic_BTL_SERVER_o* __this, int32_t* pSeqStep, uint8_t* pNextSeq, const MethodInfo* method_info);
void Dpr_Battle_Logic_BTL_SERVER__seq_EXIT_WILD_CAPTURE (Dpr_Battle_Logic_BTL_SERVER_o* __this, int32_t* pSeqStep, uint8_t* pNextSeq, const MethodInfo* method_info);
void Dpr_Battle_Logic_BTL_SERVER__seq_EXIT_COMM (Dpr_Battle_Logic_BTL_SERVER_o* __this, int32_t* pSeqStep, uint8_t* pNextSeq, const MethodInfo* method_info);
void Dpr_Battle_Logic_BTL_SERVER__seq_EXIT_NPC (Dpr_Battle_Logic_BTL_SERVER_o* __this, int32_t* pSeqStep, uint8_t* pNextSeq, const MethodInfo* method_info);
void Dpr_Battle_Logic_BTL_SERVER__seq_EXIT_BATTLE_SPOT_TRAINER (Dpr_Battle_Logic_BTL_SERVER_o* __this, int32_t* pSeqStep, uint8_t* pNextSeq, const MethodInfo* method_info);
void Dpr_Battle_Logic_BTL_SERVER__seq_EXIT_FADEOUT (Dpr_Battle_Logic_BTL_SERVER_o* __this, int32_t* pSeqStep, uint8_t* pNextSeq, const MethodInfo* method_info);
void Dpr_Battle_Logic_BTL_SERVER__seq_EXIT_QUIT (Dpr_Battle_Logic_BTL_SERVER_o* __this, int32_t* pSeqStep, uint8_t* pNextSeq, const MethodInfo* method_info);
void Dpr_Battle_Logic_BTL_SERVER__seq_NEW_STARTUP_SEND_LATEST_REPLY (Dpr_Battle_Logic_BTL_SERVER_o* __this, int32_t* pSeqStep, uint8_t* pNextSeq, const MethodInfo* method_info);
void Dpr_Battle_Logic_BTL_SERVER__seq_NEW_STARTUP_SWITCH (Dpr_Battle_Logic_BTL_SERVER_o* __this, int32_t* pSeqStep, uint8_t* pNextSeq, const MethodInfo* method_info);
void Dpr_Battle_Logic_BTL_SERVER__notifyBattleResult (Dpr_Battle_Logic_BTL_SERVER_o* __this, const MethodInfo* method_info);
void Dpr_Battle_Logic_BTL_SERVER__checkBattleResult (Dpr_Battle_Logic_BTL_SERVER_o* __this, int32_t* pResult, int32_t* pJudgeCause, const MethodInfo* method_info);
bool Dpr_Battle_Logic_BTL_SERVER__checkRaidBattleWin (Dpr_Battle_Logic_BTL_SERVER_o* __this, const MethodInfo* method_info);
int32_t Dpr_Battle_Logic_BTL_SERVER__getRule (Dpr_Battle_Logic_BTL_SERVER_o* __this, const MethodInfo* method_info);
void Dpr_Battle_Logic_BTL_SERVER__storeClientInstruction (Dpr_Battle_Logic_BTL_SERVER_o* __this, const MethodInfo* method_info);
void Dpr_Battle_Logic_BTL_SERVER__clearClientInstruction (Dpr_Battle_Logic_BTL_SERVER_o* __this, const MethodInfo* method_info);
void Dpr_Battle_Logic_BTL_SERVER__storeClientLimitTime (Dpr_Battle_Logic_BTL_SERVER_o* __this, const MethodInfo* method_info);
bool Dpr_Battle_Logic_BTL_SERVER__isClientLimitTimeOver (Dpr_Battle_Logic_BTL_SERVER_o* __this, const MethodInfo* method_info);
void Dpr_Battle_Logic_BTL_SERVER__sendClientLimitTimeToLiveCupWatchMember (Dpr_Battle_Logic_BTL_SERVER_o* __this, const MethodInfo* method_info);
void Dpr_Battle_Logic_BTL_SERVER__sendRequest (Dpr_Battle_Logic_BTL_SERVER_o* __this, uint8_t request, const MethodInfo* method_info);
void Dpr_Battle_Logic_BTL_SERVER__sendRequestAlone (Dpr_Battle_Logic_BTL_SERVER_o* __this, uint8_t request, uint8_t clientID, const MethodInfo* method_info);
void Dpr_Battle_Logic_BTL_SERVER__sendRequestCore (Dpr_Battle_Logic_BTL_SERVER_o* __this, uint8_t request, uint8_t clientID, const MethodInfo* method_info);
void Dpr_Battle_Logic_BTL_SERVER__setSendDataInAllAdapter (Dpr_Battle_Logic_BTL_SERVER_o* __this, uint16_t serialNumber, uint8_t serverSeq, uint8_t serverReq, void* sendData, uint32_t dataSize, const MethodInfo* method_info);
void Dpr_Battle_Logic_BTL_SERVER__setSendDataInSingleAdapter (Dpr_Battle_Logic_BTL_SERVER_o* __this, uint16_t serialNumber, uint8_t serverSeq, uint8_t serverReq, void* sendData, uint32_t dataSize, uint8_t clientID, const MethodInfo* method_info);
void Dpr_Battle_Logic_BTL_SERVER__registerSendData (Dpr_Battle_Logic_BTL_SERVER_o* __this, uint16_t serialNumber, uint8_t serverSeq, uint8_t serverReq, void* data, uint32_t dataSize, const MethodInfo* method_info);
bool Dpr_Battle_Logic_BTL_SERVER__waitAllAdapterReply (Dpr_Battle_Logic_BTL_SERVER_o* __this, const MethodInfo* method_info);
void Dpr_Battle_Logic_BTL_SERVER__resetAdapterCmd (Dpr_Battle_Logic_BTL_SERVER_o* __this, const MethodInfo* method_info);
void Dpr_Battle_Logic_BTL_SERVER__initAllAdapter (Dpr_Battle_Logic_BTL_SERVER_o* __this, const MethodInfo* method_info);
void Dpr_Battle_Logic_BTL_SERVER__clearClientData (Dpr_Battle_Logic_BTL_SERVER_o* __this, const MethodInfo* method_info);
void Dpr_Battle_Logic_BTL_SERVER__setupClientData (Dpr_Battle_Logic_BTL_SERVER_o* __this, int32_t clientID, Dpr_Battle_Logic_Adapter_o* adapter, Dpr_Battle_Logic_BTL_PARTY_o* party, const MethodInfo* method_info);
Dpr_Battle_Logic_Adapter_o* Dpr_Battle_Logic_BTL_SERVER__getClientAdapter (Dpr_Battle_Logic_BTL_SERVER_o* __this, int32_t clientID, const MethodInfo* method_info);
bool Dpr_Battle_Logic_BTL_SERVER__isClientExist (Dpr_Battle_Logic_BTL_SERVER_o* __this, int32_t clientID, const MethodInfo* method_info);
