#pragma once

#include "il2cpp.h"

int32_t Dpr_Battle_Logic_Common__GetEventVar (Dpr_Battle_Logic_EventFactor_EventHandlerArgs_o** args, uint16_t label, const MethodInfo* method_info);
uint8_t Dpr_Battle_Logic_Common__GetEventVar_FAIL_CAUSE (Dpr_Battle_Logic_EventFactor_EventHandlerArgs_o** args, const MethodInfo* method_info);
int32_t Dpr_Battle_Logic_Common__GetEventVar_DAMAGE_TYPE (Dpr_Battle_Logic_EventFactor_EventHandlerArgs_o** args, const MethodInfo* method_info);
bool Dpr_Battle_Logic_Common__RewriteEventVar (Dpr_Battle_Logic_EventFactor_EventHandlerArgs_o** args, uint16_t label, int32_t value, const MethodInfo* method_info);
bool Dpr_Battle_Logic_Common__RewriteEventVar_FAIL_CAUSE (Dpr_Battle_Logic_EventFactor_EventHandlerArgs_o** args, uint8_t value, const MethodInfo* method_info);
void Dpr_Battle_Logic_Common__MulEventVar (Dpr_Battle_Logic_EventFactor_EventHandlerArgs_o** args, uint16_t label, int32_t value, const MethodInfo* method_info);
bool Dpr_Battle_Logic_Common__GetEventVarIfExist (Dpr_Battle_Logic_EventFactor_EventHandlerArgs_o** args, uint16_t label, int32_t* value, const MethodInfo* method_info);
Il2CppObject* Dpr_Battle_Logic_Common__GetEventVarAddress (Dpr_Battle_Logic_EventFactor_EventHandlerArgs_o** args, uint16_t label, const MethodInfo* method_info);
uint16_t Dpr_Battle_Logic_Common__GetSubID (Dpr_Battle_Logic_EventFactor_EventHandlerArgs_o** args, const MethodInfo* method_info);
int32_t Dpr_Battle_Logic_Common__GetWorkValue (Dpr_Battle_Logic_EventFactor_EventHandlerArgs_o** args, uint8_t workIdx, const MethodInfo* method_info);
void Dpr_Battle_Logic_Common__SetWorkValue (Dpr_Battle_Logic_EventFactor_EventHandlerArgs_o** args, uint8_t workIdx, int32_t value, const MethodInfo* method_info);
void Dpr_Battle_Logic_Common__RemoveFactor (Dpr_Battle_Logic_EventFactor_EventHandlerArgs_o** args, const MethodInfo* method_info);
Dpr_Battle_Logic_BTL_POKEPARAM_o* Dpr_Battle_Logic_Common__GetPokeParam (Dpr_Battle_Logic_EventFactor_EventHandlerArgs_o** args, uint8_t pokeID, const MethodInfo* method_info);
uint8_t Dpr_Battle_Logic_Common__GetExistPokeID (Dpr_Battle_Logic_EventFactor_EventHandlerArgs_o** args, uint8_t pos, const MethodInfo* method_info);
uint8_t Dpr_Battle_Logic_Common__GetMyAddCounter (Dpr_Battle_Logic_EventFactor_EventHandlerArgs_o** args, int32_t side, const MethodInfo* method_info);
uint8_t Dpr_Battle_Logic_Common__GetWeatherCausePokeID (Dpr_Battle_Logic_EventFactor_EventHandlerArgs_o** args, const MethodInfo* method_info);
int32_t Dpr_Battle_Logic_Common__GetRule (Dpr_Battle_Logic_EventFactor_EventHandlerArgs_o** args, const MethodInfo* method_info);
int32_t Dpr_Battle_Logic_Common__PokeIDtoSide (Dpr_Battle_Logic_EventFactor_EventHandlerArgs_o** args, uint8_t* pokeID, const MethodInfo* method_info);
int32_t Dpr_Battle_Logic_Common__PokeIDtoSide (Dpr_Battle_Logic_EventFactor_EventHandlerArgs_o** args, uint16_t* label, const MethodInfo* method_info);
int32_t Dpr_Battle_Logic_Common__PokeIDtoOpponentSide (Dpr_Battle_Logic_EventFactor_EventHandlerArgs_o** args, uint8_t* pokeID, const MethodInfo* method_info);
int32_t Dpr_Battle_Logic_Common__GetOpponentSide (Dpr_Battle_Logic_EventFactor_EventHandlerArgs_o** args, int32_t side, const MethodInfo* method_info);
bool Dpr_Battle_Logic_Common__IsFriendPokeID (Dpr_Battle_Logic_EventFactor_EventHandlerArgs_o** args, uint8_t pokeID1, uint8_t pokeID2, const MethodInfo* method_info);
bool Dpr_Battle_Logic_Common__IsFriendPokeID (Dpr_Battle_Logic_EventFactor_SkipCheckHandlerArgs_o** args, uint8_t pokeID1, uint8_t pokeID2, const MethodInfo* method_info);
uint8_t Dpr_Battle_Logic_Common__GetGround (Dpr_Battle_Logic_EventFactor_EventHandlerArgs_o** args, const MethodInfo* method_info);
Dpr_Battle_Logic_BTL_FIELD_SITUATION_o* Dpr_Battle_Logic_Common__GetFieldSituation (Dpr_Battle_Logic_EventFactor_EventHandlerArgs_o** args, const MethodInfo* method_info);
void Dpr_Battle_Logic_Common__AttachSkipCheckHandler (Dpr_Battle_Logic_EventFactor_EventHandlerArgs_o** args, Dpr_Battle_Logic_EventFactor_SkipCheckHandler_o** handler, const MethodInfo* method_info);
void Dpr_Battle_Logic_Common__DetachSkipCheckHandler (Dpr_Battle_Logic_EventFactor_EventHandlerArgs_o** args, const MethodInfo* method_info);
uint8_t Dpr_Battle_Logic_Common__GetPokeLastPos (Dpr_Battle_Logic_EventFactor_EventHandlerArgs_o** args, uint8_t pokeID, const MethodInfo* method_info);
uint8_t Dpr_Battle_Logic_Common__GetFrontPokeID (Dpr_Battle_Logic_EventFactor_EventHandlerArgs_o** args, uint8_t* pos, const MethodInfo* method_info);
uint8_t Dpr_Battle_Logic_Common__PokeIDtoPokePos (Dpr_Battle_Logic_EventFactor_EventHandlerArgs_o** args, uint8_t* pokeID, const MethodInfo* method_info);
uint8_t Dpr_Battle_Logic_Common__GetTurnCount (Dpr_Battle_Logic_EventFactor_EventHandlerArgs_o** args, const MethodInfo* method_info);
Dpr_Battle_Logic_PosEffect_EffectParam_o Dpr_Battle_Logic_Common__GetEffectParam (Dpr_Battle_Logic_EventFactor_EventHandlerArgs_o** args, uint8_t* pos, int32_t* posEffect, const MethodInfo* method_info);
Dpr_Battle_Logic_PokeAction_o* Dpr_Battle_Logic_Common__SearchByPokeID (Dpr_Battle_Logic_EventFactor_EventHandlerArgs_o** args, uint8_t pokeID, bool isSkipGStart, bool isSkipNull, const MethodInfo* method_info);
Dpr_Battle_Logic_WazaRec_o* Dpr_Battle_Logic_Common__GetWazaRec (Dpr_Battle_Logic_EventFactor_EventHandlerArgs_o** args, const MethodInfo* method_info);
int32_t Dpr_Battle_Logic_Common__GetCompetitor (Dpr_Battle_Logic_EventFactor_EventHandlerArgs_o** args, const MethodInfo* method_info);
bool Dpr_Battle_Logic_Common__IsPlayerSide (Dpr_Battle_Logic_EventFactor_EventHandlerArgs_o** args, int32_t* side, const MethodInfo* method_info);
bool Dpr_Battle_Logic_Common__GetSetupStatusFlag (Dpr_Battle_Logic_EventFactor_EventHandlerArgs_o** args, int32_t* flag, const MethodInfo* method_info);
bool Dpr_Battle_Logic_Common__CheckWazaEffectEnable (Dpr_Battle_Logic_EventFactor_EventHandlerArgs_o** args, const MethodInfo* method_info);
bool Dpr_Battle_Logic_Common__CheckFieldEffect (Dpr_Battle_Logic_EventFactor_EventHandlerArgs_o** args, int32_t* effType, const MethodInfo* method_info);
bool Dpr_Battle_Logic_Common__IsExistBenchPoke (Dpr_Battle_Logic_EventFactor_EventHandlerArgs_o** args, uint8_t* pokeID, const MethodInfo* method_info);
void Dpr_Battle_Logic_Common__SetRecallEnable (Dpr_Battle_Logic_EventFactor_EventHandlerArgs_o** args, const MethodInfo* method_info);
bool Dpr_Battle_Logic_Common__IsExistPokeChangeRequest (Dpr_Battle_Logic_EventFactor_EventHandlerArgs_o** args, const MethodInfo* method_info);
bool Dpr_Battle_Logic_Common__IsExistPoke (Dpr_Battle_Logic_EventFactor_EventHandlerArgs_o** args, uint8_t* pokeID, const MethodInfo* method_info);
bool Dpr_Battle_Logic_Common__IsAllActDoneByPokeID (Dpr_Battle_Logic_EventFactor_EventHandlerArgs_o** args, uint8_t* pokeID, const MethodInfo* method_info);
void Dpr_Battle_Logic_Common__ConvertForIsolate (Dpr_Battle_Logic_EventFactor_EventHandlerArgs_o** args, const MethodInfo* method_info);
bool Dpr_Battle_Logic_Common__TokuseiWindow_In (Dpr_Battle_Logic_EventFactor_EventHandlerArgs_o** args, uint8_t pokeID, const MethodInfo* method_info);
bool Dpr_Battle_Logic_Common__TokuseiWindow_Out (Dpr_Battle_Logic_EventFactor_EventHandlerArgs_o** args, uint8_t pokeID, const MethodInfo* method_info);
bool Dpr_Battle_Logic_Common__RecoverHP (Dpr_Battle_Logic_EventFactor_EventHandlerArgs_o** args, Dpr_Battle_Logic_Section_RecoverHP_Description_o** desc, const MethodInfo* method_info);
bool Dpr_Battle_Logic_Common__DrainHp (Dpr_Battle_Logic_EventFactor_EventHandlerArgs_o** args, Dpr_Battle_Logic_Section_FromEvent_DrainHP_Description_o** desc, const MethodInfo* method_info);
bool Dpr_Battle_Logic_Common__Damage (Dpr_Battle_Logic_EventFactor_EventHandlerArgs_o** args, Dpr_Battle_Logic_Section_FromEvent_Damage_Description_o** desc, const MethodInfo* method_info);
bool Dpr_Battle_Logic_Common__ShiftHP (Dpr_Battle_Logic_EventFactor_EventHandlerArgs_o** args, Dpr_Battle_Logic_Section_FromEvent_ShiftHP_Description_o** desc, const MethodInfo* method_info);
bool Dpr_Battle_Logic_Common__RecoverPP (Dpr_Battle_Logic_EventFactor_EventHandlerArgs_o** args, Dpr_Battle_Logic_Section_FromEvent_RecoverPP_Description_o** desc, const MethodInfo* method_info);
bool Dpr_Battle_Logic_Common__DecrementPP (Dpr_Battle_Logic_EventFactor_EventHandlerArgs_o** args, Dpr_Battle_Logic_Section_FromEvent_DecrementPP_Description_o** desc, const MethodInfo* method_info);
bool Dpr_Battle_Logic_Common__CureSick (Dpr_Battle_Logic_EventFactor_EventHandlerArgs_o** args, Dpr_Battle_Logic_Section_CureSick_Description_o** desc, const MethodInfo* method_info);
bool Dpr_Battle_Logic_Common__CanAddSick (Dpr_Battle_Logic_EventFactor_EventHandlerArgs_o** args, Dpr_Battle_Logic_Section_AddSickCheckFail_Description_o** desc, const MethodInfo* method_info);
bool Dpr_Battle_Logic_Common__AddSick (Dpr_Battle_Logic_EventFactor_EventHandlerArgs_o** args, Dpr_Battle_Logic_Section_AddSick_Description_o** desc, const MethodInfo* method_info);
bool Dpr_Battle_Logic_Common__AddSick_Kodawari (Dpr_Battle_Logic_EventFactor_EventHandlerArgs_o** args, uint8_t targetID, int32_t actWazaNo, int32_t orgWazaNo, const MethodInfo* method_info);
bool Dpr_Battle_Logic_Common__RankEffect (Dpr_Battle_Logic_EventFactor_EventHandlerArgs_o** args, Dpr_Battle_Logic_Section_FromEvent_RankEffect_Description_o** desc, const MethodInfo* method_info);
bool Dpr_Battle_Logic_Common__RankSet (Dpr_Battle_Logic_EventFactor_EventHandlerArgs_o** args, Dpr_Battle_Logic_Section_FromEvent_RankSet_Description_o** desc, const MethodInfo* method_info);
bool Dpr_Battle_Logic_Common__RankReset (Dpr_Battle_Logic_EventFactor_EventHandlerArgs_o** args, Dpr_Battle_Logic_Section_FromEvent_RankReset_Description_o** desc, const MethodInfo* method_info);
bool Dpr_Battle_Logic_Common__RankFlat_Recover (Dpr_Battle_Logic_EventFactor_EventHandlerArgs_o** args, Dpr_Battle_Logic_Section_RankFlat_Recover_Description_o** desc, const MethodInfo* method_info);
bool Dpr_Battle_Logic_Common__RankFlat_Weaken (Dpr_Battle_Logic_EventFactor_EventHandlerArgs_o** args, Dpr_Battle_Logic_Section_FromEvent_RankFlat_Weaken_Description_o** desc, const MethodInfo* method_info);
bool Dpr_Battle_Logic_Common__SetPower (Dpr_Battle_Logic_EventFactor_EventHandlerArgs_o** args, Dpr_Battle_Logic_Section_FromEvent_SetPower_Description_o** desc, const MethodInfo* method_info);
bool Dpr_Battle_Logic_Common__Kill (Dpr_Battle_Logic_EventFactor_EventHandlerArgs_o** args, Dpr_Battle_Logic_Section_FromEvent_Kill_Description_o** desc, const MethodInfo* method_info);
bool Dpr_Battle_Logic_Common__ChangeType (Dpr_Battle_Logic_EventFactor_EventHandlerArgs_o** args, Dpr_Battle_Logic_Section_FromEvent_ChangePokeType_Description_o** desc, const MethodInfo* method_info);
bool Dpr_Battle_Logic_Common__ExtendType (Dpr_Battle_Logic_EventFactor_EventHandlerArgs_o** args, Dpr_Battle_Logic_Section_FromEvent_ExtendPokeType_Description_o** desc, const MethodInfo* method_info);
void Dpr_Battle_Logic_Common__Message (Dpr_Battle_Logic_EventFactor_EventHandlerArgs_o** args, Dpr_Battle_Logic_Section_FromEvent_Message_Description_o** desc, const MethodInfo* method_info);
bool Dpr_Battle_Logic_Common__SetTurnFlag (Dpr_Battle_Logic_EventFactor_EventHandlerArgs_o** args, Dpr_Battle_Logic_Section_FromEvent_SetTurnFlag_Description_o** desc, const MethodInfo* method_info);
bool Dpr_Battle_Logic_Common__ResetTurnFlag (Dpr_Battle_Logic_EventFactor_EventHandlerArgs_o** args, Dpr_Battle_Logic_Section_FromEvent_ResetTurnFlag_Description_o** desc, const MethodInfo* method_info);
bool Dpr_Battle_Logic_Common__SetContFlag (Dpr_Battle_Logic_EventFactor_EventHandlerArgs_o** args, Dpr_Battle_Logic_Section_FromEvent_SetContFlag_Description_o** desc, const MethodInfo* method_info);
bool Dpr_Battle_Logic_Common__ResetContFlag (Dpr_Battle_Logic_EventFactor_EventHandlerArgs_o** args, Dpr_Battle_Logic_Section_FromEvent_ResetContFlag_Description_o** desc, const MethodInfo* method_info);
void Dpr_Battle_Logic_Common__SetPermFlag (Dpr_Battle_Logic_EventFactor_EventHandlerArgs_o** args, Dpr_Battle_Logic_Section_FromEvent_SetPermFlag_Description_o** desc, const MethodInfo* method_info);
bool Dpr_Battle_Logic_Common__AddSideEffect (Dpr_Battle_Logic_EventFactor_EventHandlerArgs_o** args, Dpr_Battle_Logic_Section_SideEffect_Add_Description_o** desc, const MethodInfo* method_info);
bool Dpr_Battle_Logic_Common__RemoveSideEffect (Dpr_Battle_Logic_EventFactor_EventHandlerArgs_o** args, Dpr_Battle_Logic_Section_SideEffect_Remove_Description_o** desc, const MethodInfo* method_info);
bool Dpr_Battle_Logic_Common__SleepSideEffect (Dpr_Battle_Logic_EventFactor_EventHandlerArgs_o** args, Dpr_Battle_Logic_Section_SideEffect_Sleep_Description_o** desc, const MethodInfo* method_info);
bool Dpr_Battle_Logic_Common__SwapSideEffect (Dpr_Battle_Logic_EventFactor_EventHandlerArgs_o** args, int32_t side1, int32_t side2, Dpr_Battle_Logic_Section_SideEffect_Swap_SidefEffectSwapCheck_o* check, const MethodInfo* method_info);
bool Dpr_Battle_Logic_Common__AddFieldEffect (Dpr_Battle_Logic_EventFactor_EventHandlerArgs_o** args, Dpr_Battle_Logic_Section_FieldEffect_Add_Description_o** desc, const MethodInfo* method_info);
bool Dpr_Battle_Logic_Common__RemoveFieldEffect (Dpr_Battle_Logic_EventFactor_EventHandlerArgs_o** args, Dpr_Battle_Logic_Section_FromEvent_FieldEffect_Remove_Description_o** desc, const MethodInfo* method_info);
uint8_t Dpr_Battle_Logic_Common__GetWeather (Dpr_Battle_Logic_EventFactor_EventHandlerArgs_o** args, const MethodInfo* method_info);
uint8_t Dpr_Battle_Logic_Common__GetLocalWeather (Dpr_Battle_Logic_EventFactor_EventHandlerArgs_o** args, uint8_t pokeID, const MethodInfo* method_info);
uint8_t Dpr_Battle_Logic_Common__GetWeather_True (Dpr_Battle_Logic_EventFactor_EventHandlerArgs_o** args, const MethodInfo* method_info);
uint8_t Dpr_Battle_Logic_Common__GetDefaultWeather (Dpr_Battle_Logic_EventFactor_EventHandlerArgs_o** args, const MethodInfo* method_info);
bool Dpr_Battle_Logic_Common__ChangeWeather (Dpr_Battle_Logic_EventFactor_EventHandlerArgs_o** args, Dpr_Battle_Logic_Section_FromEvent_ChangeWeather_Description_o** desc, const MethodInfo* method_info);
bool Dpr_Battle_Logic_Common__AddPosEffect (Dpr_Battle_Logic_EventFactor_EventHandlerArgs_o** args, Dpr_Battle_Logic_Section_FromEvent_PosEffect_Add_Description_o** desc, const MethodInfo* method_info);
void Dpr_Battle_Logic_Common__RemovePosEffect (Dpr_Battle_Logic_EventFactor_EventHandlerArgs_o** args, Dpr_Battle_Logic_Section_FromEvent_RemovePosEffect_Description_o** desc, const MethodInfo* method_info);
void Dpr_Battle_Logic_Common__UpdatePosEffectParam (Dpr_Battle_Logic_EventFactor_EventHandlerArgs_o** args, Dpr_Battle_Logic_Section_FromEvent_UpdatePosEffectParam_Description_o** desc, const MethodInfo* method_info);
bool Dpr_Battle_Logic_Common__ChangeTokusei (Dpr_Battle_Logic_EventFactor_EventHandlerArgs_o** args, Dpr_Battle_Logic_Section_FromEvent_ChangeTokusei_Description_o** desc, const MethodInfo* method_info);
void Dpr_Battle_Logic_Common__SkillSwap (Dpr_Battle_Logic_EventFactor_EventHandlerArgs_o** args, Dpr_Battle_Logic_Section_SkillSwap_Description_o** desc, const MethodInfo* method_info);
bool Dpr_Battle_Logic_Common__SetItem (Dpr_Battle_Logic_EventFactor_EventHandlerArgs_o** args, Dpr_Battle_Logic_Section_FromEvent_SetItem_Description_o** desc, const MethodInfo* method_info);
bool Dpr_Battle_Logic_Common__SwapItem (Dpr_Battle_Logic_EventFactor_EventHandlerArgs_o** args, Dpr_Battle_Logic_Section_FromEvent_SwapItem_Description_o** desc, const MethodInfo* method_info);
void Dpr_Battle_Logic_Common__CheckItemReaction (Dpr_Battle_Logic_EventFactor_EventHandlerArgs_o** args, Dpr_Battle_Logic_Section_CheckItemReaction_Description_o** desc, const MethodInfo* method_info);
bool Dpr_Battle_Logic_Common__UseItem (Dpr_Battle_Logic_EventFactor_EventHandlerArgs_o** args, Dpr_Battle_Logic_Section_UseItemEquip_Description_o** desc, const MethodInfo* method_info);
bool Dpr_Battle_Logic_Common__UseItem_Force (Dpr_Battle_Logic_EventFactor_EventHandlerArgs_o** args, Dpr_Battle_Logic_Section_FromEvent_UseItem_Force_Description_o** desc, const MethodInfo* method_info);
void Dpr_Battle_Logic_Common__ConsumeItem (Dpr_Battle_Logic_EventFactor_EventHandlerArgs_o** args, Dpr_Battle_Logic_Section_FromEvent_ConsumeItem_Description_o** desc, const MethodInfo* method_info);
uint16_t Dpr_Battle_Logic_Common__GetTamaHiroiBall (Dpr_Battle_Logic_EventFactor_EventHandlerArgs_o** args, const MethodInfo* method_info);
void Dpr_Battle_Logic_Common__UpdateWaza (Dpr_Battle_Logic_EventFactor_EventHandlerArgs_o** args, Dpr_Battle_Logic_Section_FromEvent_UpdateWaza_Description_o** desc, const MethodInfo* method_info);
void Dpr_Battle_Logic_Common__SetPokeCounter (Dpr_Battle_Logic_EventFactor_EventHandlerArgs_o** args, Dpr_Battle_Logic_Section_FromEvent_SetCounter_Description_o** desc, const MethodInfo* method_info);
bool Dpr_Battle_Logic_Common__DelayWazaDamage (Dpr_Battle_Logic_EventFactor_EventHandlerArgs_o** args, Dpr_Battle_Logic_Section_FromEvent_DelayWazaDamage_Description_o** desc, const MethodInfo* method_info);
bool Dpr_Battle_Logic_Common__QuitBattle (Dpr_Battle_Logic_EventFactor_EventHandlerArgs_o** args, Dpr_Battle_Logic_Section_FromEvent_QuitBattle_Description_o** desc, const MethodInfo* method_info);
bool Dpr_Battle_Logic_Common__MemberChange (Dpr_Battle_Logic_EventFactor_EventHandlerArgs_o** args, Dpr_Battle_Logic_Section_FromEvent_MemberChange_Description_o** desc, const MethodInfo* method_info);
void Dpr_Battle_Logic_Common__BattonTouch (Dpr_Battle_Logic_EventFactor_EventHandlerArgs_o** args, Dpr_Battle_Logic_Section_FromEvent_BattonTouch_Description_o** desc, const MethodInfo* method_info);
bool Dpr_Battle_Logic_Common__Shrink (Dpr_Battle_Logic_EventFactor_EventHandlerArgs_o** args, Dpr_Battle_Logic_Section_FromEvent_Shrink_Description_o** desc, const MethodInfo* method_info);
void Dpr_Battle_Logic_Common__Relive (Dpr_Battle_Logic_EventFactor_EventHandlerArgs_o** args, Dpr_Battle_Logic_Section_Relive_Description_o** desc, const MethodInfo* method_info);
void Dpr_Battle_Logic_Common__SetWeight (Dpr_Battle_Logic_EventFactor_EventHandlerArgs_o** args, Dpr_Battle_Logic_Section_FromEvent_SetWeight_Description_o** desc, const MethodInfo* method_info);
bool Dpr_Battle_Logic_Common__PushOut (Dpr_Battle_Logic_EventFactor_EventHandlerArgs_o** args, Dpr_Battle_Logic_Section_PushOut_Description_o** desc, const MethodInfo* method_info);
bool Dpr_Battle_Logic_Common__InterruptPokeAction (Dpr_Battle_Logic_EventFactor_EventHandlerArgs_o** args, Dpr_Battle_Logic_Section_FromEvent_InterruptAction_Description_o** desc, const MethodInfo* method_info);
bool Dpr_Battle_Logic_Common__InterruptPokeAction_ByWaza (Dpr_Battle_Logic_EventFactor_EventHandlerArgs_o** args, Dpr_Battle_Logic_Section_FromEvent_InterruptAction_ByWaza_Description_o** desc, const MethodInfo* method_info);
bool Dpr_Battle_Logic_Common__PostponePokeAction (Dpr_Battle_Logic_EventFactor_EventHandlerArgs_o** args, Dpr_Battle_Logic_Section_FromEvent_PostponeAction_Description_o** desc, const MethodInfo* method_info);
bool Dpr_Battle_Logic_Common__SwapPoke (Dpr_Battle_Logic_EventFactor_EventHandlerArgs_o** args, Dpr_Battle_Logic_Section_FromEvent_SwapPoke_Description_o** desc, const MethodInfo* method_info);
bool Dpr_Battle_Logic_Common__Hensin (Dpr_Battle_Logic_EventFactor_EventHandlerArgs_o** args, Dpr_Battle_Logic_Section_FromEvent_Hensin_Description_o** desc, const MethodInfo* method_info);
bool Dpr_Battle_Logic_Common__BreakIllusion (Dpr_Battle_Logic_EventFactor_EventHandlerArgs_o** args, Dpr_Battle_Logic_Section_FromEvent_BreakIllusion_Description_o** desc, const MethodInfo* method_info);
void Dpr_Battle_Logic_Common__VanishMessageWindow (Dpr_Battle_Logic_EventFactor_EventHandlerArgs_o** args, Dpr_Battle_Logic_Section_FromEvent_VanishMessageWindow_Description_o** desc, const MethodInfo* method_info);
bool Dpr_Battle_Logic_Common__CancelTameHide (Dpr_Battle_Logic_EventFactor_EventHandlerArgs_o** args, Dpr_Battle_Logic_Section_FromEvent_TameHideCancel_Description_o** desc, const MethodInfo* method_info);
void Dpr_Battle_Logic_Common__AddViewEffect (Dpr_Battle_Logic_EventFactor_EventHandlerArgs_o** args, Dpr_Battle_Logic_Section_FromEvent_AddViewEffect_Description_o** desc, const MethodInfo* method_info);
bool Dpr_Battle_Logic_Common__FormChange (Dpr_Battle_Logic_EventFactor_EventHandlerArgs_o** args, Dpr_Battle_Logic_Section_FromEvent_FormChange_Description_o** desc, const MethodInfo* method_info);
void Dpr_Battle_Logic_Common__SetWazaEffectIndex (Dpr_Battle_Logic_EventFactor_EventHandlerArgs_o** args, Dpr_Battle_Logic_Section_FromEvent_SetWazaEffectIndex_Description_o** desc, const MethodInfo* method_info);
void Dpr_Battle_Logic_Common__SetWazaEffectEnable (Dpr_Battle_Logic_EventFactor_EventHandlerArgs_o** args, Dpr_Battle_Logic_Section_FromEvent_SetWazaEffectEnable_Description_o** desc, const MethodInfo* method_info);
void Dpr_Battle_Logic_Common__FriendshipEffect (Dpr_Battle_Logic_EventFactor_EventHandlerArgs_o** args, Dpr_Battle_Logic_Section_FromEvent_FriendshipEffect_Description_o** desc, const MethodInfo* method_info);
bool Dpr_Battle_Logic_Common__InsertWazaAction (Dpr_Battle_Logic_EventFactor_EventHandlerArgs_o** args, Dpr_Battle_Logic_Section_FromEvent_InsertWazaAction_Description_o** desc, const MethodInfo* method_info);
bool Dpr_Battle_Logic_Common__FreeFallStart (Dpr_Battle_Logic_EventFactor_EventHandlerArgs_o** args, Dpr_Battle_Logic_Section_FromEvent_FreeFallStart_Description_o** desc, const MethodInfo* method_info);
void Dpr_Battle_Logic_Common__FreeFallRelease (Dpr_Battle_Logic_EventFactor_EventHandlerArgs_o** args, Dpr_Battle_Logic_Section_FreeFall_Release_Description_o** desc, const MethodInfo* method_info);
void Dpr_Battle_Logic_Common__FreeFallAppearTarget (Dpr_Battle_Logic_EventFactor_EventHandlerArgs_o** args, Dpr_Battle_Logic_Section_AppearFreeFallTarget_Description_o** desc, const MethodInfo* method_info);
bool Dpr_Battle_Logic_Common__DeadCheck (Dpr_Battle_Logic_EventFactor_EventHandlerArgs_o** args, Dpr_Battle_Logic_Section_FromEvent_DeadCheck_Description_o** desc, const MethodInfo* method_info);
uint16_t Dpr_Battle_Logic_Common__CalcAgility (Dpr_Battle_Logic_EventFactor_EventHandlerArgs_o** args, Dpr_Battle_Logic_Section_FromEvent_CalcAgility_Description_o** desc, const MethodInfo* method_info);
uint8_t Dpr_Battle_Logic_Common__CalcAgilityOrder (Dpr_Battle_Logic_EventFactor_EventHandlerArgs_o** args, Dpr_Battle_Logic_Section_FromEvent_CalcAgilityOrder_Description_o** desc, const MethodInfo* method_info);
uint8_t Dpr_Battle_Logic_Common__DecideWazaTargetAuto (Dpr_Battle_Logic_EventFactor_EventHandlerArgs_o** args, uint8_t pokeID, int32_t wazano, const MethodInfo* method_info);
bool Dpr_Battle_Logic_Common__CheckFloating (Dpr_Battle_Logic_EventFactor_EventHandlerArgs_o** args, Dpr_Battle_Logic_Section_CheckFloating_Description_o** desc, const MethodInfo* method_info);
uint32_t Dpr_Battle_Logic_Common__GetWeight (Dpr_Battle_Logic_EventFactor_EventHandlerArgs_o** args, Dpr_Battle_Logic_Section_FromEvent_GetWeight_Description_o** desc, const MethodInfo* method_info);
bool Dpr_Battle_Logic_Common__CanForceEscape (Dpr_Battle_Logic_EventFactor_EventHandlerArgs_o** args, Dpr_Battle_Logic_Section_Escape_CheckForceSucceed_Description_o** desc, const MethodInfo* method_info);
void Dpr_Battle_Logic_Common__PlayWazaEffect (Dpr_Battle_Logic_EventFactor_EventHandlerArgs_o** args, Dpr_Battle_Logic_Section_FromEvent_PlayWazaEffect_Description_o** desc, const MethodInfo* method_info);
bool Dpr_Battle_Logic_Common__CheckSpecialWazaAdditionalEffectOccur (Dpr_Battle_Logic_EventFactor_EventHandlerArgs_o** args, Dpr_Battle_Logic_Section_FromEvent_CheckSpecialWazaAdditionalEffectOccur_Description_o** desc, const MethodInfo* method_info);
bool Dpr_Battle_Logic_Common__CheckTargetPokeID (Dpr_Battle_Logic_EventFactor_EventHandlerArgs_o** args, uint8_t pokeID, const MethodInfo* method_info);
uint8_t Dpr_Battle_Logic_Common__getTaragetPokeID (Dpr_Battle_Logic_EventSystem_o* eventSystem, uint8_t index, const MethodInfo* method_info);
bool Dpr_Battle_Logic_Common__CheckTargetSide (Dpr_Battle_Logic_EventFactor_EventHandlerArgs_o** args, int32_t side, const MethodInfo* method_info);
bool Dpr_Battle_Logic_Common__CheckPokeOrderLast (Dpr_Battle_Logic_EventFactor_EventHandlerArgs_o** args, uint8_t pokeID, const MethodInfo* method_info);
bool Dpr_Battle_Logic_Common__CheckActionDoneOnce (Dpr_Battle_Logic_EventFactor_EventHandlerArgs_o** args, uint8_t pokeID, const MethodInfo* method_info);
bool Dpr_Battle_Logic_Common__CheckUnbreakablePokeItem (uint16_t monsno, uint16_t itemID, const MethodInfo* method_info);
bool Dpr_Battle_Logic_Common__CheckCantChangeItemPoke (Dpr_Battle_Logic_EventFactor_EventHandlerArgs_o** args, uint8_t pokeID, const MethodInfo* method_info);
bool Dpr_Battle_Logic_Common__CheckCantStealWildPoke (Dpr_Battle_Logic_EventFactor_EventHandlerArgs_o** args, uint8_t attackPokeID, const MethodInfo* method_info);
bool Dpr_Battle_Logic_Common__CheckCantStealPoke (Dpr_Battle_Logic_EventFactor_EventHandlerArgs_o** args, uint8_t attackPokeID, uint8_t targetPokeID, const MethodInfo* method_info);
bool Dpr_Battle_Logic_Common__CheckTameHidePoke (Dpr_Battle_Logic_EventFactor_EventHandlerArgs_o** args, uint8_t pokeID, const MethodInfo* method_info);
void Dpr_Battle_Logic_Common__MagicCoat_CheckSideEffWaza (Dpr_Battle_Logic_EventFactor_EventHandlerArgs_o** args, uint8_t pokeID, const MethodInfo* method_info);
void Dpr_Battle_Logic_Common__MagicCoat_Wait (Dpr_Battle_Logic_EventFactor_EventHandlerArgs_o** args, uint8_t pokeID, const MethodInfo* method_info);
void Dpr_Battle_Logic_Common__MagicCoat_Reaction (Dpr_Battle_Logic_EventFactor_EventHandlerArgs_o** args, uint8_t pokeID, const MethodInfo* method_info);
void Dpr_Battle_Logic_Common__MulWazaBasePower (Dpr_Battle_Logic_EventFactor_EventHandlerArgs_o** args, uint32_t ratio, const MethodInfo* method_info);
void Dpr_Battle_Logic_Common__SkipEscapeCalculation (Dpr_Battle_Logic_EventFactor_EventHandlerArgs_o** args, uint8_t pokeID, const MethodInfo* method_info);
bool Dpr_Battle_Logic_Common__CheckEscapeExMessage (Dpr_Battle_Logic_EventFactor_EventHandlerArgs_o** args, uint8_t pokeID, const MethodInfo* method_info);
uint32_t Dpr_Battle_Logic_Common__GetKillCount (Dpr_Battle_Logic_EventFactor_EventHandlerArgs_o** args, uint8_t pokeID, const MethodInfo* method_info);
bool Dpr_Battle_Logic_Common__Boujin_WeatherReaction (Dpr_Battle_Logic_EventFactor_EventHandlerArgs_o** args, uint8_t pokeID, const MethodInfo* method_info);
bool Dpr_Battle_Logic_Common__Boujin_WazaNoEffect (Dpr_Battle_Logic_EventFactor_EventHandlerArgs_o** args, uint8_t pokeID, const MethodInfo* method_info);
uint8_t Dpr_Battle_Logic_Common__GetMezapaType (Dpr_Battle_Logic_EventFactor_EventHandlerArgs_o** args, uint8_t pokeID, const MethodInfo* method_info);
bool Dpr_Battle_Logic_Common__GuardWazaSick (Dpr_Battle_Logic_EventFactor_EventHandlerArgs_o** args, uint8_t pokeID, int32_t guardSick, const MethodInfo* method_info);
void Dpr_Battle_Logic_Common__Dorobou_Start (Dpr_Battle_Logic_EventFactor_EventHandlerArgs_o** args, uint8_t pokeID, const MethodInfo* method_info);
bool Dpr_Battle_Logic_Common__Dorobou_CheckEnable (Dpr_Battle_Logic_EventFactor_EventHandlerArgs_o** args, uint8_t pokeID, const MethodInfo* method_info);
void Dpr_Battle_Logic_Common__SortTargetsByAgility (Dpr_Battle_Logic_EventFactor_EventHandlerArgs_o** args, System_Byte_array* targetPokeIDAry, uint32_t targetCount, uint8_t myPokeID, bool bDownFriendPriority, const MethodInfo* method_info);
uint32_t Dpr_Battle_Logic_Common__CheckPokeSick (Dpr_Battle_Logic_EventFactor_EventHandlerArgs_o** args, uint8_t pokeID, const MethodInfo* method_info);
bool Dpr_Battle_Logic_Common__CheckSimpleEffectOnlyAdvantage (int32_t waza, const MethodInfo* method_info);
void Dpr_Battle_Logic_Common__KonoyubiTomare_TemptTarget (Dpr_Battle_Logic_EventFactor_EventHandlerArgs_o** args, uint8_t konoyubiPokeID, uint8_t temptPriority, uint8_t temptCause, const MethodInfo* method_info);
void Dpr_Battle_Logic_Common__HandCommon_TemptTarget (Dpr_Battle_Logic_EventFactor_EventHandlerArgs_o** args, uint8_t temptPokeID, uint8_t temptPriority, uint8_t temptCause, const MethodInfo* method_info);
bool Dpr_Battle_Logic_Common__Katayaburi_SkipCheck (Dpr_Battle_Logic_EventFactor_SkipCheckHandlerArgs_o** args, const MethodInfo* method_info);
bool Dpr_Battle_Logic_Common__CheckFreeFallUserPoke (Dpr_Battle_Logic_EventFactor_EventHandlerArgs_o** args, uint8_t pokeID, const MethodInfo* method_info);
bool Dpr_Battle_Logic_Common__CheckFreeFallPoke (Dpr_Battle_Logic_EventFactor_EventHandlerArgs_o** args, uint8_t pokeID, const MethodInfo* method_info);
bool Dpr_Battle_Logic_Common__CheckShowDown (Dpr_Battle_Logic_EventFactor_EventHandlerArgs_o** args, const MethodInfo* method_info);
bool Dpr_Battle_Logic_Common__IsClientExist (Dpr_Battle_Logic_EventFactor_EventHandlerArgs_o** args, int32_t clientID, const MethodInfo* method_info);
bool Dpr_Battle_Logic_Common__IsClientFriends (Dpr_Battle_Logic_EventFactor_EventHandlerArgs_o** args, int32_t clientID1, int32_t clientID2, const MethodInfo* method_info);
Dpr_Battle_Logic_BTL_PARTY_o* Dpr_Battle_Logic_Common__GetPartyData (Dpr_Battle_Logic_EventFactor_EventHandlerArgs_o** args, int32_t clientID, const MethodInfo* method_info);
Dpr_Battle_Logic_BTL_PARTY_o* Dpr_Battle_Logic_Common__GetPartyData (Dpr_Battle_Logic_EventFactor_EventHandlerArgs_o** args, uint8_t pokeID, const MethodInfo* method_info);
Dpr_Battle_Logic_BTL_PARTY_o* Dpr_Battle_Logic_Common__GetFriendPartyData (Dpr_Battle_Logic_EventFactor_EventHandlerArgs_o** args, uint8_t pokeID, const MethodInfo* method_info);
uint8_t Dpr_Battle_Logic_Common__GetFriendPokePos (Dpr_Battle_Logic_EventFactor_EventHandlerArgs_o** args, uint8_t basePos, uint8_t idx, const MethodInfo* method_info);
uint8_t Dpr_Battle_Logic_Common__GetOpponentPokePos (Dpr_Battle_Logic_EventFactor_EventHandlerArgs_o** args, uint8_t basePos, uint8_t idx, const MethodInfo* method_info);
uint8_t Dpr_Battle_Logic_Common__GetFacedPokePos (Dpr_Battle_Logic_EventFactor_EventHandlerArgs_o** args, uint8_t basePos, const MethodInfo* method_info);
uint8_t Dpr_Battle_Logic_Common__GetExistFrontPokePos (Dpr_Battle_Logic_EventFactor_EventHandlerArgs_o** args, uint8_t pokeID, const MethodInfo* method_info);
bool Dpr_Battle_Logic_Common__CheckEvolutionIncompleted (Dpr_Battle_Logic_EventFactor_EventHandlerArgs_o** args, uint8_t pokeID, const MethodInfo* method_info);
bool Dpr_Battle_Logic_Common__CheckItemUsable (Dpr_Battle_Logic_EventFactor_EventHandlerArgs_o** args, uint8_t pokeID, const MethodInfo* method_info);
uint16_t Dpr_Battle_Logic_Common__GetUsableItem (Dpr_Battle_Logic_EventFactor_EventHandlerArgs_o** args, uint8_t pokeID, const MethodInfo* method_info);
uint8_t Dpr_Battle_Logic_Common__GetAllOpponentFrontPokeID (Dpr_Battle_Logic_EventFactor_EventHandlerArgs_o** args, uint8_t basePokeID, System_Byte_array* dst, const MethodInfo* method_info);
uint8_t Dpr_Battle_Logic_Common__ExpandExistPokeID (Dpr_Battle_Logic_EventFactor_EventHandlerArgs_o** args, Dpr_Battle_Logic_ExPokePos_o** exPos, System_Byte_array* dst_pokeID, const MethodInfo* method_info);
bool Dpr_Battle_Logic_Common__CheckChangeEnablePokeExist (Dpr_Battle_Logic_EventFactor_EventHandlerArgs_o** args, uint8_t pokeID, const MethodInfo* method_info);
uint8_t Dpr_Battle_Logic_Common__GetFightEnableBenchPokeNum (Dpr_Battle_Logic_EventFactor_EventHandlerArgs_o** args, uint8_t pokeID, const MethodInfo* method_info);
uint8_t Dpr_Battle_Logic_Common__GetMyBenchIndex (Dpr_Battle_Logic_EventFactor_EventHandlerArgs_o** args, uint8_t pokeID, const MethodInfo* method_info);
uint8_t Dpr_Battle_Logic_Common__GetClientCoverPosCount (Dpr_Battle_Logic_EventFactor_EventHandlerArgs_o** args, uint8_t pokeID, const MethodInfo* method_info);
bool Dpr_Battle_Logic_Common__AddBonusMoney (Dpr_Battle_Logic_EventFactor_EventHandlerArgs_o** args, uint32_t volume, const MethodInfo* method_info);
void Dpr_Battle_Logic_Common__SetMoneyDoubleUp (Dpr_Battle_Logic_EventFactor_EventHandlerArgs_o** args, uint8_t pokeID, int32_t cause, const MethodInfo* method_info);
bool Dpr_Battle_Logic_Common__CheckMemberOutInterruptActionProceeding (Dpr_Battle_Logic_EventFactor_EventHandlerArgs_o** args, const MethodInfo* method_info);
void Dpr_Battle_Logic_Common__AddMagicCoatAction (Dpr_Battle_Logic_EventFactor_EventHandlerArgs_o** args, uint8_t pokeID, uint8_t targetPokeID, const MethodInfo* method_info);
void Dpr_Battle_Logic_Common__EnableWazaSubEffect (Dpr_Battle_Logic_EventFactor_EventHandlerArgs_o** args, uint8_t pokeID, const MethodInfo* method_info);
bool Dpr_Battle_Logic_Common__IsEscapeEnableBattle (Dpr_Battle_Logic_EventFactor_EventHandlerArgs_o** args, const MethodInfo* method_info);
void Dpr_Battle_Logic_Common___cctor (const MethodInfo* method_info);
