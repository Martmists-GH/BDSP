#pragma once

#include "il2cpp.h"

void Dpr_Battle_Logic_BTL_POKEPARAM__WAZADMG_REC_Setup (Dpr_Battle_Logic_BTL_POKEPARAM_WAZADMG_REC_o* rec, uint8_t pokeID, uint8_t pokePos, uint16_t wazaID, uint8_t wazaType, uint16_t damage, int32_t damageType, const MethodInfo* method_info);
uint8_t Dpr_Battle_Logic_BTL_POKEPARAM__GetFormNo (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, const MethodInfo* method_info);
uint8_t Dpr_Battle_Logic_BTL_POKEPARAM__GetFriendship (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, const MethodInfo* method_info);
uint8_t Dpr_Battle_Logic_BTL_POKEPARAM__PokeIDtoFreeFallCounter (uint8_t pokeID, const MethodInfo* method_info);
uint8_t Dpr_Battle_Logic_BTL_POKEPARAM__FreeFallCounterToPokeID (uint8_t counter, const MethodInfo* method_info);
void Dpr_Battle_Logic_BTL_POKEPARAM__flgbuf_clear (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, System_Byte_array* buf, const MethodInfo* method_info);
void Dpr_Battle_Logic_BTL_POKEPARAM__flgbuf_set (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, System_Byte_array* buf, uint32_t flagID, const MethodInfo* method_info);
void Dpr_Battle_Logic_BTL_POKEPARAM__flgbuf_reset (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, System_Byte_array* buf, uint32_t flagID, const MethodInfo* method_info);
bool Dpr_Battle_Logic_BTL_POKEPARAM__flgbuf_get (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, System_Byte_array* buf, uint32_t flagID, const MethodInfo* method_info);
void Dpr_Battle_Logic_BTL_POKEPARAM___ctor (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, Dpr_Battle_Logic_FieldStatus_o* fieldStatus, const MethodInfo* method_info);
void Dpr_Battle_Logic_BTL_POKEPARAM__Dispose (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, const MethodInfo* method_info);
void Dpr_Battle_Logic_BTL_POKEPARAM__Setup (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, Dpr_Battle_Logic_BTL_POKEPARAM_SetupParam_o** setupParam, const MethodInfo* method_info);
void Dpr_Battle_Logic_BTL_POKEPARAM__setupBySrcData (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, bool fReflectHP, bool fParamUpdate, bool fTokuseiUpdate, bool fWeightUpdate, const MethodInfo* method_info);
void Dpr_Battle_Logic_BTL_POKEPARAM__setupBySrcDataBase (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, bool fTypeUpdate, bool fParamUpdate, bool isGMode, const MethodInfo* method_info);
uint16_t Dpr_Battle_Logic_BTL_POKEPARAM__getBasePower (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, int32_t powerID, bool isGMode, bool isApplyRaidBossHpCoef, const MethodInfo* method_info);
void Dpr_Battle_Logic_BTL_POKEPARAM__updateWeight (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, const MethodInfo* method_info);
uint32_t Dpr_Battle_Logic_BTL_POKEPARAM__wazaWork_setupByPP (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, Pml_PokePara_PokemonParam_o* pp_src, bool fLinkSurface, const MethodInfo* method_info);
void Dpr_Battle_Logic_BTL_POKEPARAM__wazaWork_ReflectToPP (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, const MethodInfo* method_info);
void Dpr_Battle_Logic_BTL_POKEPARAM__wazaWork_ReflectFromPP (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, const MethodInfo* method_info);
void Dpr_Battle_Logic_BTL_POKEPARAM__wazaWork_ClearSurface (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, const MethodInfo* method_info);
void Dpr_Battle_Logic_BTL_POKEPARAM__wazaSet_ClearUsedFlag (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, Dpr_Battle_Logic_BTL_POKEPARAM_WAZA_SET_o* waza, const MethodInfo* method_info);
bool Dpr_Battle_Logic_BTL_POKEPARAM__wazaCore_SetupByPP (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, Dpr_Battle_Logic_BTL_POKEPARAM_WAZA_CORE_o* core, Pml_PokePara_PokemonParam_o* pp, uint8_t index, const MethodInfo* method_info);
void Dpr_Battle_Logic_BTL_POKEPARAM__CopyFrom (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, Dpr_Battle_Logic_BTL_POKEPARAM_o** srcParam, bool isCompletely, const MethodInfo* method_info);
void Dpr_Battle_Logic_BTL_POKEPARAM__CORE_PARAM_Copy (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, Dpr_Battle_Logic_BTL_POKEPARAM_CORE_PARAM_o* dest, Dpr_Battle_Logic_BTL_POKEPARAM_CORE_PARAM_o** src, const MethodInfo* method_info);
uint8_t Dpr_Battle_Logic_BTL_POKEPARAM__GetID (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, const MethodInfo* method_info);
uint16_t Dpr_Battle_Logic_BTL_POKEPARAM__GetMonsNo (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, const MethodInfo* method_info);
int32_t Dpr_Battle_Logic_BTL_POKEPARAM__GetSeikaku (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, const MethodInfo* method_info);
uint16_t Dpr_Battle_Logic_BTL_POKEPARAM__GetHenshinMonsNo (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, const MethodInfo* method_info);
uint16_t Dpr_Battle_Logic_BTL_POKEPARAM__GetHenshinFormNo (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, const MethodInfo* method_info);
Dpr_Battle_Logic_DefaultPowerUpDesc_o* Dpr_Battle_Logic_BTL_POKEPARAM__GetDefaultPowerUpDesc (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, const MethodInfo* method_info);
uint8_t Dpr_Battle_Logic_BTL_POKEPARAM__GetDeadCause (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, const MethodInfo* method_info);
uint8_t Dpr_Battle_Logic_BTL_POKEPARAM__GetDeadCausePokeID (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, const MethodInfo* method_info);
void Dpr_Battle_Logic_BTL_POKEPARAM__SetDeadCause (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, uint8_t damageCause, uint8_t damageCausePokeID, const MethodInfo* method_info);
void Dpr_Battle_Logic_BTL_POKEPARAM__ClearDeadCause (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, const MethodInfo* method_info);
uint8_t Dpr_Battle_Logic_BTL_POKEPARAM__GetKillCount (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, const MethodInfo* method_info);
void Dpr_Battle_Logic_BTL_POKEPARAM__SetKillCount (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, uint8_t killCount, const MethodInfo* method_info);
void Dpr_Battle_Logic_BTL_POKEPARAM__IncKillCount (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, const MethodInfo* method_info);
int32_t Dpr_Battle_Logic_BTL_POKEPARAM__GetSpActPriority (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, const MethodInfo* method_info);
void Dpr_Battle_Logic_BTL_POKEPARAM__SetSpActPriority (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, uint8_t priority, const MethodInfo* method_info);
void Dpr_Battle_Logic_BTL_POKEPARAM__resetSpActPriority (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, const MethodInfo* method_info);
Pml_PokePara_PokemonParam_o* Dpr_Battle_Logic_BTL_POKEPARAM__GetSrcData (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, const MethodInfo* method_info);
Pml_PokePara_PokemonParam_o* Dpr_Battle_Logic_BTL_POKEPARAM__GetSrcDataConst (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, const MethodInfo* method_info);
void Dpr_Battle_Logic_BTL_POKEPARAM__SetViewSrcPokeID (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, uint8_t fakeTargetPokeID, const MethodInfo* method_info);
uint8_t Dpr_Battle_Logic_BTL_POKEPARAM__GetViewSrcPokeID (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, const MethodInfo* method_info);
void Dpr_Battle_Logic_BTL_POKEPARAM__effrank_Init (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, Dpr_Battle_Logic_BTL_POKEPARAM_VARIABLE_PARAM_o* rank, const MethodInfo* method_info);
void Dpr_Battle_Logic_BTL_POKEPARAM__effrank_Reset (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, Dpr_Battle_Logic_BTL_POKEPARAM_VARIABLE_PARAM_o* rank, const MethodInfo* method_info);
bool Dpr_Battle_Logic_BTL_POKEPARAM__effrank_ResetRankUp (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, Dpr_Battle_Logic_BTL_POKEPARAM_VARIABLE_PARAM_o* rank, const MethodInfo* method_info);
bool Dpr_Battle_Logic_BTL_POKEPARAM__effrank_Recover (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, Dpr_Battle_Logic_BTL_POKEPARAM_VARIABLE_PARAM_o* rank, const MethodInfo* method_info);
void Dpr_Battle_Logic_BTL_POKEPARAM__dmgrec_ClearWork (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, const MethodInfo* method_info);
void Dpr_Battle_Logic_BTL_POKEPARAM__dmgrec_FwdTurn (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, const MethodInfo* method_info);
void Dpr_Battle_Logic_BTL_POKEPARAM__confrontRec_Clear (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, const MethodInfo* method_info);
void Dpr_Battle_Logic_BTL_POKEPARAM__Confront_Set (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, uint8_t pokeID, const MethodInfo* method_info);
uint8_t Dpr_Battle_Logic_BTL_POKEPARAM__Confront_GetCount (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, const MethodInfo* method_info);
uint8_t Dpr_Battle_Logic_BTL_POKEPARAM__Confront_GetPokeID (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, uint8_t idx, const MethodInfo* method_info);
int32_t Dpr_Battle_Logic_BTL_POKEPARAM__GetValue (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, int32_t vid, const MethodInfo* method_info);
int32_t Dpr_Battle_Logic_BTL_POKEPARAM__GetValue_Base (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, int32_t vid, const MethodInfo* method_info);
uint8_t Dpr_Battle_Logic_BTL_POKEPARAM__GetEffortValue (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, int32_t powerID, const MethodInfo* method_info);
bool Dpr_Battle_Logic_BTL_POKEPARAM__IsEffortValueFull (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, const MethodInfo* method_info);
uint8_t Dpr_Battle_Logic_BTL_POKEPARAM__GetNativeTalentPower (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, int32_t powerID, const MethodInfo* method_info);
int32_t Dpr_Battle_Logic_BTL_POKEPARAM__convertValueID (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, int32_t vid, const MethodInfo* method_info);
bool Dpr_Battle_Logic_BTL_POKEPARAM__IsHPFull (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, const MethodInfo* method_info);
bool Dpr_Battle_Logic_BTL_POKEPARAM__IsDead (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, const MethodInfo* method_info);
bool Dpr_Battle_Logic_BTL_POKEPARAM__IsFightEnable (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, const MethodInfo* method_info);
bool Dpr_Battle_Logic_BTL_POKEPARAM__CheckSick (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, int32_t sickType, const MethodInfo* method_info);
bool Dpr_Battle_Logic_BTL_POKEPARAM__CheckNemuri (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, int32_t checkMode, const MethodInfo* method_info);
bool Dpr_Battle_Logic_BTL_POKEPARAM__CheckMoudoku (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, const MethodInfo* method_info);
int32_t Dpr_Battle_Logic_BTL_POKEPARAM__GetWazaLockID (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, const MethodInfo* method_info);
void Dpr_Battle_Logic_BTL_POKEPARAM__clearWazaSickWork (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, uint32_t clearCode, const MethodInfo* method_info);
uint32_t Dpr_Battle_Logic_BTL_POKEPARAM__GetPokeSick (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, const MethodInfo* method_info);
uint16_t Dpr_Battle_Logic_BTL_POKEPARAM__GetSickParam (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, int32_t sick, const MethodInfo* method_info);
Dpr_Battle_Logic_BTL_SICKCONT_o Dpr_Battle_Logic_BTL_POKEPARAM__GetSickCont (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, int32_t sick, const MethodInfo* method_info);
uint8_t Dpr_Battle_Logic_BTL_POKEPARAM__GetSickTurnCount (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, int32_t sick, const MethodInfo* method_info);
bool Dpr_Battle_Logic_BTL_POKEPARAM__IsSickLastTurn (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, int32_t sickType, const MethodInfo* method_info);
int32_t Dpr_Battle_Logic_BTL_POKEPARAM__CalcSickDamage (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, int32_t sick, const MethodInfo* method_info);
int32_t Dpr_Battle_Logic_BTL_POKEPARAM__GetKodawariWazaID (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, const MethodInfo* method_info);
bool Dpr_Battle_Logic_BTL_POKEPARAM__IsTokuseiDisabledByKagakuHenkaGas (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, const MethodInfo* method_info);
void Dpr_Battle_Logic_BTL_POKEPARAM__ReflectToPP (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, bool fDefaultForm, const MethodInfo* method_info);
void Dpr_Battle_Logic_BTL_POKEPARAM__wazaWork_UpdateNumber (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, Dpr_Battle_Logic_BTL_POKEPARAM_WAZA_SET_o* waza, int32_t nextNumber, uint8_t ppMax, bool fPermenent, const MethodInfo* method_info);
void Dpr_Battle_Logic_BTL_POKEPARAM__wazaCore_UpdateNumber (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, Dpr_Battle_Logic_BTL_POKEPARAM_WAZA_CORE_o* core, int32_t nextID, uint8_t ppMax, const MethodInfo* method_info);
void Dpr_Battle_Logic_BTL_POKEPARAM__clearHensin (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, const MethodInfo* method_info);
void Dpr_Battle_Logic_BTL_POKEPARAM__clearUsedWazaFlag (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, const MethodInfo* method_info);
void Dpr_Battle_Logic_BTL_POKEPARAM__clearCounter (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, const MethodInfo* method_info);
uint8_t Dpr_Battle_Logic_BTL_POKEPARAM__WAZA_GetCount (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, const MethodInfo* method_info);
uint8_t Dpr_Battle_Logic_BTL_POKEPARAM__WAZA_GetCount_Org (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, const MethodInfo* method_info);
uint8_t Dpr_Battle_Logic_BTL_POKEPARAM__WAZA_GetUsedCountInAlive (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, const MethodInfo* method_info);
uint8_t Dpr_Battle_Logic_BTL_POKEPARAM__WAZA_GetUsedCount (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, const MethodInfo* method_info);
uint8_t Dpr_Battle_Logic_BTL_POKEPARAM__WAZA_GetUsableCount (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, const MethodInfo* method_info);
int32_t Dpr_Battle_Logic_BTL_POKEPARAM__WAZA_GetID (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, uint8_t idx, const MethodInfo* method_info);
int32_t Dpr_Battle_Logic_BTL_POKEPARAM__WAZA_GetID_Org (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, uint8_t idx, const MethodInfo* method_info);
bool Dpr_Battle_Logic_BTL_POKEPARAM__WAZA_CheckUsedInAlive (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, uint8_t idx, const MethodInfo* method_info);
void Dpr_Battle_Logic_BTL_POKEPARAM__WAZA_Copy (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, Dpr_Battle_Logic_BTL_POKEPARAM_o* bppDst, const MethodInfo* method_info);
uint8_t Dpr_Battle_Logic_BTL_POKEPARAM__WAZA_GetUsedCount (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, uint8_t wazaIdx, const MethodInfo* method_info);
void Dpr_Battle_Logic_BTL_POKEPARAM__WAZA_SetUsedCount (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, uint8_t wazaIdx, uint8_t value, const MethodInfo* method_info);
uint8_t Dpr_Battle_Logic_BTL_POKEPARAM__WAZA_GetKillCount (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, uint8_t wazaIdx, const MethodInfo* method_info);
void Dpr_Battle_Logic_BTL_POKEPARAM__WAZA_SetKillCount (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, uint8_t wazaIdx, uint8_t value, const MethodInfo* method_info);
uint8_t Dpr_Battle_Logic_BTL_POKEPARAM__WAZA_GetPPShort (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, uint8_t idx, const MethodInfo* method_info);
uint8_t Dpr_Battle_Logic_BTL_POKEPARAM__WAZA_GetPPShort_Org (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, uint8_t idx, const MethodInfo* method_info);
bool Dpr_Battle_Logic_BTL_POKEPARAM__WAZA_CheckPPShortAny (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, const MethodInfo* method_info);
bool Dpr_Battle_Logic_BTL_POKEPARAM__WAZA_CheckPPShortAny_Org (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, const MethodInfo* method_info);
uint16_t Dpr_Battle_Logic_BTL_POKEPARAM__WAZA_GetPP (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, uint8_t wazaIdx, const MethodInfo* method_info);
uint16_t Dpr_Battle_Logic_BTL_POKEPARAM__WAZA_GetPP_ByNumber (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, int32_t waza, const MethodInfo* method_info);
uint16_t Dpr_Battle_Logic_BTL_POKEPARAM__WAZA_GetPP_Org (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, uint8_t wazaIdx, const MethodInfo* method_info);
uint16_t Dpr_Battle_Logic_BTL_POKEPARAM__WAZA_GetMaxPP (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, uint8_t wazaIdx, const MethodInfo* method_info);
uint16_t Dpr_Battle_Logic_BTL_POKEPARAM__WAZA_GetMaxPP_Org (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, uint8_t wazaIdx, const MethodInfo* method_info);
bool Dpr_Battle_Logic_BTL_POKEPARAM__WAZA_IsPPFull (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, uint8_t wazaIdx, bool fOrg, const MethodInfo* method_info);
void Dpr_Battle_Logic_BTL_POKEPARAM__WAZA_DecrementPP (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, uint8_t wazaIdx, uint8_t value, const MethodInfo* method_info);
void Dpr_Battle_Logic_BTL_POKEPARAM__WAZA_DecrementPP_Org (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, uint8_t wazaIdx, uint8_t value, const MethodInfo* method_info);
void Dpr_Battle_Logic_BTL_POKEPARAM__WAZA_SetUsedFlag_Org (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, uint8_t wazaIdx, const MethodInfo* method_info);
int32_t Dpr_Battle_Logic_BTL_POKEPARAM__WAZA_IncrementPP (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, uint8_t wazaIdx, uint8_t value, const MethodInfo* method_info);
int32_t Dpr_Battle_Logic_BTL_POKEPARAM__WAZA_IncrementPP_Org (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, uint8_t wazaIdx, uint8_t value, const MethodInfo* method_info);
bool Dpr_Battle_Logic_BTL_POKEPARAM__WAZA_IsLinkOut (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, uint8_t wazaIdx, const MethodInfo* method_info);
void Dpr_Battle_Logic_BTL_POKEPARAM__WAZA_SetUsedFlag (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, uint8_t wazaIdx, const MethodInfo* method_info);
void Dpr_Battle_Logic_BTL_POKEPARAM__WAZA_UpdateID (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, uint8_t wazaIdx, int32_t waza, uint8_t ppMax, bool fPermenent, const MethodInfo* method_info);
bool Dpr_Battle_Logic_BTL_POKEPARAM__WAZA_IsUsable (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, int32_t waza, const MethodInfo* method_info);
uint8_t Dpr_Battle_Logic_BTL_POKEPARAM__WAZA_SearchIdx (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, int32_t waza, const MethodInfo* method_info);
void Dpr_Battle_Logic_BTL_POKEPARAM__splitTypeCore (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, uint8_t* type1, uint8_t* type2, const MethodInfo* method_info);
Dpr_Battle_Logic_PokeTypePair_o Dpr_Battle_Logic_BTL_POKEPARAM__GetPokeType (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, const MethodInfo* method_info);
uint8_t Dpr_Battle_Logic_BTL_POKEPARAM__GetOriginalPokeType1 (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, const MethodInfo* method_info);
uint8_t Dpr_Battle_Logic_BTL_POKEPARAM__GetOriginalPokeType2 (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, const MethodInfo* method_info);
bool Dpr_Battle_Logic_BTL_POKEPARAM__IsMatchType (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, uint8_t type, const MethodInfo* method_info);
void Dpr_Battle_Logic_BTL_POKEPARAM__SetBaseStatus (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, int32_t vid, uint16_t value, const MethodInfo* method_info);
int32_t Dpr_Battle_Logic_BTL_POKEPARAM__GetValue_Critical (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, int32_t vid, const MethodInfo* method_info);
uint16_t Dpr_Battle_Logic_BTL_POKEPARAM__GetItem (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, const MethodInfo* method_info);
void Dpr_Battle_Logic_BTL_POKEPARAM__SetItem (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, uint16_t itemID, const MethodInfo* method_info);
uint16_t Dpr_Battle_Logic_BTL_POKEPARAM__GetItemEffective (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, Dpr_Battle_Logic_FieldStatus_o** fldSim, const MethodInfo* method_info);
uint16_t Dpr_Battle_Logic_BTL_POKEPARAM__GetTotalTurnCount (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, const MethodInfo* method_info);
void Dpr_Battle_Logic_BTL_POKEPARAM__IncTotalTurnCount (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, const MethodInfo* method_info);
uint16_t Dpr_Battle_Logic_BTL_POKEPARAM__GetTurnCount (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, const MethodInfo* method_info);
uint16_t Dpr_Battle_Logic_BTL_POKEPARAM__GetAppearTurn (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, const MethodInfo* method_info);
bool Dpr_Battle_Logic_BTL_POKEPARAM__TURNFLAG_Get (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, int32_t flagID, const MethodInfo* method_info);
bool Dpr_Battle_Logic_BTL_POKEPARAM__CONTFLAG_Get (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, int32_t flagID, const MethodInfo* method_info);
bool Dpr_Battle_Logic_BTL_POKEPARAM__PERMFLAG_Get (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, int32_t flagID, const MethodInfo* method_info);
void Dpr_Battle_Logic_BTL_POKEPARAM__PERMFLAG_Set (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, int32_t flagID, const MethodInfo* method_info);
int32_t Dpr_Battle_Logic_BTL_POKEPARAM__CONTFLAG_CheckWazaHide (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, const MethodInfo* method_info);
bool Dpr_Battle_Logic_BTL_POKEPARAM__IsWazaHide (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, const MethodInfo* method_info);
bool Dpr_Battle_Logic_BTL_POKEPARAM__IsUsingFreeFall (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, const MethodInfo* method_info);
int32_t Dpr_Battle_Logic_BTL_POKEPARAM__GetHPRatio (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, const MethodInfo* method_info);
void Dpr_Battle_Logic_BTL_POKEPARAM__SetHPRatio (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, int32_t ratio, const MethodInfo* method_info);
uint32_t Dpr_Battle_Logic_BTL_POKEPARAM__calcHpRatio (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, uint32_t maxHP, int32_t ratio, const MethodInfo* method_info);
uint32_t Dpr_Battle_Logic_BTL_POKEPARAM__getHPBeforeG (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, const MethodInfo* method_info);
int8_t Dpr_Battle_Logic_BTL_POKEPARAM__getRankVaryStatus (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, int32_t type, int8_t* min, int8_t* max, const MethodInfo* method_info);
bool Dpr_Battle_Logic_BTL_POKEPARAM__IsRankEffectValid (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, int32_t rankType, int32_t volume, const MethodInfo* method_info);
int32_t Dpr_Battle_Logic_BTL_POKEPARAM__RankEffectUpLimit (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, int32_t rankType, const MethodInfo* method_info);
int32_t Dpr_Battle_Logic_BTL_POKEPARAM__RankEffectDownLimit (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, int32_t rankType, const MethodInfo* method_info);
bool Dpr_Battle_Logic_BTL_POKEPARAM__IsRankEffectDowned (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, const MethodInfo* method_info);
uint8_t Dpr_Battle_Logic_BTL_POKEPARAM__RankUp (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, int32_t rankType, uint8_t volume, const MethodInfo* method_info);
uint8_t Dpr_Battle_Logic_BTL_POKEPARAM__RankUp_Core (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, uint8_t volume, int8_t* ptr, const MethodInfo* method_info);
uint8_t Dpr_Battle_Logic_BTL_POKEPARAM__RankDown (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, int32_t rankType, uint8_t volume, const MethodInfo* method_info);
uint8_t Dpr_Battle_Logic_BTL_POKEPARAM__RankDown_Core (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, uint8_t volume, int8_t* ptr, const MethodInfo* method_info);
void Dpr_Battle_Logic_BTL_POKEPARAM__RankSet (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, int32_t rankType, uint8_t value, const MethodInfo* method_info);
void Dpr_Battle_Logic_BTL_POKEPARAM__RankSet_Core (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, uint8_t value, int8_t* ptr, const MethodInfo* method_info);
bool Dpr_Battle_Logic_BTL_POKEPARAM__RankRecover (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, const MethodInfo* method_info);
void Dpr_Battle_Logic_BTL_POKEPARAM__RankReset (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, const MethodInfo* method_info);
bool Dpr_Battle_Logic_BTL_POKEPARAM__RankUpReset (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, const MethodInfo* method_info);
uint8_t Dpr_Battle_Logic_BTL_POKEPARAM__GetCriticalRank (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, const MethodInfo* method_info);
uint8_t Dpr_Battle_Logic_BTL_POKEPARAM__GetCriticalRankPure (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, const MethodInfo* method_info);
bool Dpr_Battle_Logic_BTL_POKEPARAM__AddCriticalRank (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, int32_t value, const MethodInfo* method_info);
void Dpr_Battle_Logic_BTL_POKEPARAM__SetCriticalRank (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, uint8_t rank, const MethodInfo* method_info);
void Dpr_Battle_Logic_BTL_POKEPARAM__HpMinus (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, uint16_t value, const MethodInfo* method_info);
void Dpr_Battle_Logic_BTL_POKEPARAM__HpPlus (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, uint16_t value, const MethodInfo* method_info);
void Dpr_Battle_Logic_BTL_POKEPARAM__HpZero (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, const MethodInfo* method_info);
void Dpr_Battle_Logic_BTL_POKEPARAM__TURNFLAG_Set (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, int32_t flagID, const MethodInfo* method_info);
void Dpr_Battle_Logic_BTL_POKEPARAM__CONTFLAG_Set (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, int32_t flagID, const MethodInfo* method_info);
void Dpr_Battle_Logic_BTL_POKEPARAM__CONTFLAG_Clear (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, int32_t flagID, const MethodInfo* method_info);
void Dpr_Battle_Logic_BTL_POKEPARAM__SetWazaSick (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, int32_t sick, Dpr_Battle_Logic_BTL_SICKCONT_o* contParam, const MethodInfo* method_info);
bool Dpr_Battle_Logic_BTL_POKEPARAM__WazaSick_TurnCheck (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, int32_t sick, Dpr_Battle_Logic_BTL_SICKCONT_o* pOldContDest, bool* fCured, const MethodInfo* method_info);
bool Dpr_Battle_Logic_BTL_POKEPARAM__CheckNemuriWakeUp (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, const MethodInfo* method_info);
bool Dpr_Battle_Logic_BTL_POKEPARAM__CheckKonranWakeUp (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, const MethodInfo* method_info);
void Dpr_Battle_Logic_BTL_POKEPARAM__CurePokeSick (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, const MethodInfo* method_info);
void Dpr_Battle_Logic_BTL_POKEPARAM__cureDependSick (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, int32_t sickID, const MethodInfo* method_info);
void Dpr_Battle_Logic_BTL_POKEPARAM__CureWazaSick (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, int32_t sick, const MethodInfo* method_info);
void Dpr_Battle_Logic_BTL_POKEPARAM__CureWazaSickDependPoke (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, uint8_t depend_pokeID, const MethodInfo* method_info);
void Dpr_Battle_Logic_BTL_POKEPARAM__SetAppearTurn (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, uint16_t turn, const MethodInfo* method_info);
void Dpr_Battle_Logic_BTL_POKEPARAM__TurnCheck (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, const MethodInfo* method_info);
void Dpr_Battle_Logic_BTL_POKEPARAM__TURNFLAG_ForceOff (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, int32_t flagID, const MethodInfo* method_info);
void Dpr_Battle_Logic_BTL_POKEPARAM__Clear_ForDead (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, const MethodInfo* method_info);
void Dpr_Battle_Logic_BTL_POKEPARAM__Clear_ForOut (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, const MethodInfo* method_info);
void Dpr_Battle_Logic_BTL_POKEPARAM__Clear_ForIn (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, const MethodInfo* method_info);
void Dpr_Battle_Logic_BTL_POKEPARAM__CopyBatonTouchParams (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, Dpr_Battle_Logic_BTL_POKEPARAM_o* user, const MethodInfo* method_info);
bool Dpr_Battle_Logic_BTL_POKEPARAM__ChangePokeType (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, Dpr_Battle_Logic_PokeTypePair_o type, int32_t exTypeCause, const MethodInfo* method_info);
void Dpr_Battle_Logic_BTL_POKEPARAM__ExPokeType (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, uint8_t type, int32_t exTypeCause, const MethodInfo* method_info);
uint8_t Dpr_Battle_Logic_BTL_POKEPARAM__GetExType (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, const MethodInfo* method_info);
bool Dpr_Battle_Logic_BTL_POKEPARAM__HaveExType (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, const MethodInfo* method_info);
int32_t Dpr_Battle_Logic_BTL_POKEPARAM__GetExTypeCause (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, const MethodInfo* method_info);
void Dpr_Battle_Logic_BTL_POKEPARAM__ChangeTokusei (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, int32_t tok, const MethodInfo* method_info);
void Dpr_Battle_Logic_BTL_POKEPARAM__ChangeForm (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, uint8_t formNo, bool dontResetFormByOut, const MethodInfo* method_info);
void Dpr_Battle_Logic_BTL_POKEPARAM__correctMaxHP (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, const MethodInfo* method_info);
void Dpr_Battle_Logic_BTL_POKEPARAM__RemoveItem (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, const MethodInfo* method_info);
void Dpr_Battle_Logic_BTL_POKEPARAM__ConsumeItem (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, uint16_t itemID, const MethodInfo* method_info);
void Dpr_Battle_Logic_BTL_POKEPARAM__ClearConsumedItem (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, const MethodInfo* method_info);
uint16_t Dpr_Battle_Logic_BTL_POKEPARAM__GetConsumedItem (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, const MethodInfo* method_info);
void Dpr_Battle_Logic_BTL_POKEPARAM__UpdateWazaProcResult (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, uint8_t actTargetPos, uint8_t actWazaType, bool fActEnable, int32_t actWaza, int32_t orgWaza, const MethodInfo* method_info);
uint32_t Dpr_Battle_Logic_BTL_POKEPARAM__GetWazaContCounter (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, const MethodInfo* method_info);
int32_t Dpr_Battle_Logic_BTL_POKEPARAM__GetPrevWazaID (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, const MethodInfo* method_info);
uint8_t Dpr_Battle_Logic_BTL_POKEPARAM__GetPrevWazaType (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, const MethodInfo* method_info);
int32_t Dpr_Battle_Logic_BTL_POKEPARAM__GetPrevOrgWazaID (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, const MethodInfo* method_info);
uint8_t Dpr_Battle_Logic_BTL_POKEPARAM__GetPrevTargetPos (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, const MethodInfo* method_info);
bool Dpr_Battle_Logic_BTL_POKEPARAM__GetBtlInFlag (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, const MethodInfo* method_info);
void Dpr_Battle_Logic_BTL_POKEPARAM__SetWeight (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, uint16_t weight, const MethodInfo* method_info);
uint16_t Dpr_Battle_Logic_BTL_POKEPARAM__GetWeight (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, const MethodInfo* method_info);
void Dpr_Battle_Logic_BTL_POKEPARAM__WAZADMGREC_Add (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, Dpr_Battle_Logic_BTL_POKEPARAM_WAZADMG_REC_o* rec, const MethodInfo* method_info);
uint8_t Dpr_Battle_Logic_BTL_POKEPARAM__WAZADMGREC_GetCount (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, uint8_t turn_ridx, const MethodInfo* method_info);
bool Dpr_Battle_Logic_BTL_POKEPARAM__WAZADMGREC_Get (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, uint8_t turn_ridx, uint8_t rec_ridx, Dpr_Battle_Logic_BTL_POKEPARAM_WAZADMG_REC_o* dst, const MethodInfo* method_info);
void Dpr_Battle_Logic_BTL_POKEPARAM__COUNTER_Set (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, int32_t cnt, uint8_t value, const MethodInfo* method_info);
void Dpr_Battle_Logic_BTL_POKEPARAM__COUNTER_Inc (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, int32_t cnt, const MethodInfo* method_info);
uint8_t Dpr_Battle_Logic_BTL_POKEPARAM__COUNTER_Get (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, int32_t cnt, const MethodInfo* method_info);
void Dpr_Battle_Logic_BTL_POKEPARAM__PERMCOUNTER_Set (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, uint8_t counter, uint32_t value, const MethodInfo* method_info);
void Dpr_Battle_Logic_BTL_POKEPARAM__PERMCOUNTER_Add (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, uint8_t counter, uint32_t value, const MethodInfo* method_info);
void Dpr_Battle_Logic_BTL_POKEPARAM__PERMCOUNTER_Inc (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, uint8_t counter, const MethodInfo* method_info);
uint32_t Dpr_Battle_Logic_BTL_POKEPARAM__PERMCOUNTER_Get (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, uint8_t counter, const MethodInfo* method_info);
bool Dpr_Battle_Logic_BTL_POKEPARAM__AddExp (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, uint32_t exp, const MethodInfo* method_info);
uint32_t Dpr_Battle_Logic_BTL_POKEPARAM__GetExpMargin (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, const MethodInfo* method_info);
void Dpr_Battle_Logic_BTL_POKEPARAM__ReflectByPP (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, const MethodInfo* method_info);
bool Dpr_Battle_Logic_BTL_POKEPARAM__IsFakeEnable (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, const MethodInfo* method_info);
void Dpr_Battle_Logic_BTL_POKEPARAM__FakeDisable (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, const MethodInfo* method_info);
uint8_t Dpr_Battle_Logic_BTL_POKEPARAM__GetFakeTargetPokeID (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, const MethodInfo* method_info);
bool Dpr_Battle_Logic_BTL_POKEPARAM__HENSIN_CheckEnable (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, Dpr_Battle_Logic_BTL_POKEPARAM_o* target, const MethodInfo* method_info);
void Dpr_Battle_Logic_BTL_POKEPARAM__HENSIN_Set (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, Dpr_Battle_Logic_BTL_POKEPARAM_o* target, const MethodInfo* method_info);
void Dpr_Battle_Logic_BTL_POKEPARAM__henshinCopyFrom (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, Dpr_Battle_Logic_BTL_POKEPARAM_o** src, const MethodInfo* method_info);
bool Dpr_Battle_Logic_BTL_POKEPARAM__HENSIN_Check (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, const MethodInfo* method_info);
void Dpr_Battle_Logic_BTL_POKEPARAM__MIGAWARI_Create (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, uint16_t migawariHP, const MethodInfo* method_info);
void Dpr_Battle_Logic_BTL_POKEPARAM__MIGAWARI_Delete (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, const MethodInfo* method_info);
bool Dpr_Battle_Logic_BTL_POKEPARAM__MIGAWARI_IsExist (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, const MethodInfo* method_info);
uint32_t Dpr_Battle_Logic_BTL_POKEPARAM__MIGAWARI_GetHP (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, const MethodInfo* method_info);
bool Dpr_Battle_Logic_BTL_POKEPARAM__MIGAWARI_AddDamage (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, uint16_t* damage, const MethodInfo* method_info);
void Dpr_Battle_Logic_BTL_POKEPARAM__CONFRONT_REC_Set (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, uint8_t pokeID, const MethodInfo* method_info);
uint8_t Dpr_Battle_Logic_BTL_POKEPARAM__CONFRONT_REC_GetCount (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, const MethodInfo* method_info);
uint8_t Dpr_Battle_Logic_BTL_POKEPARAM__CONFRONT_REC_GetPokeID (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, uint8_t idx, const MethodInfo* method_info);
bool Dpr_Battle_Logic_BTL_POKEPARAM__CONFRONT_REC_IsMatch (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, uint8_t pokeID, const MethodInfo* method_info);
void Dpr_Battle_Logic_BTL_POKEPARAM__SetCaptureBallID (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, uint16_t ballItemID, const MethodInfo* method_info);
void Dpr_Battle_Logic_BTL_POKEPARAM__CombiWaza_SetParam (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, uint8_t combiPokeID, int32_t combiUsedWaza, const MethodInfo* method_info);
bool Dpr_Battle_Logic_BTL_POKEPARAM__CombiWaza_GetParam (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, uint8_t* combiPokeID, int32_t* combiUsedWaza, const MethodInfo* method_info);
bool Dpr_Battle_Logic_BTL_POKEPARAM__CombiWaza_IsSetParam (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, const MethodInfo* method_info);
void Dpr_Battle_Logic_BTL_POKEPARAM__CombiWaza_ClearParam (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, const MethodInfo* method_info);
bool Dpr_Battle_Logic_BTL_POKEPARAM__IsMatchTokusei (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, int32_t tokusei, const MethodInfo* method_info);
bool Dpr_Battle_Logic_BTL_POKEPARAM__HavePokerus (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, const MethodInfo* method_info);
void Dpr_Battle_Logic_BTL_POKEPARAM__AddEffortPower (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, int32_t id, uint8_t value, const MethodInfo* method_info);
void Dpr_Battle_Logic_BTL_POKEPARAM__doryoku_InitParam (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, Dpr_Battle_Logic_BTL_POKEPARAM_DORYOKU_PARAM_o* work, Pml_PokePara_PokemonParam_o* pp, const MethodInfo* method_info);
void Dpr_Battle_Logic_BTL_POKEPARAM__doryoku_AddPower (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, Dpr_Battle_Logic_BTL_POKEPARAM_DORYOKU_PARAM_o* work, int32_t powID, uint8_t value, const MethodInfo* method_info);
void Dpr_Battle_Logic_BTL_POKEPARAM__doryoku_PutToPP (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, Dpr_Battle_Logic_BTL_POKEPARAM_DORYOKU_PARAM_o* work, Pml_PokePara_PokemonParam_o* pp, const MethodInfo* method_info);
uint8_t* Dpr_Battle_Logic_BTL_POKEPARAM__doryoku_ParamIDtoValueAdrs (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, Dpr_Battle_Logic_BTL_POKEPARAM_DORYOKU_PARAM_o* work, int32_t powID, const MethodInfo* method_info);
void Dpr_Battle_Logic_BTL_POKEPARAM__AddEffortG (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, uint8_t value, const MethodInfo* method_info);
void Dpr_Battle_Logic_BTL_POKEPARAM__SetRaidBoss (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, uint8_t grade, Dpr_Battle_Logic_RaidBossDesc_o** desc, const MethodInfo* method_info);
bool Dpr_Battle_Logic_BTL_POKEPARAM__IsRaidBoss (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, const MethodInfo* method_info);
Dpr_Battle_Logic_RaidBossParam_o* Dpr_Battle_Logic_BTL_POKEPARAM__GetRaidBossParam (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, const MethodInfo* method_info);
bool Dpr_Battle_Logic_BTL_POKEPARAM__IsGMode (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, const MethodInfo* method_info);
bool Dpr_Battle_Logic_BTL_POKEPARAM__IsSpecialG (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, const MethodInfo* method_info);
bool Dpr_Battle_Logic_BTL_POKEPARAM__CanStartG (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, const MethodInfo* method_info);
void Dpr_Battle_Logic_BTL_POKEPARAM__StartGMode (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, const MethodInfo* method_info);
void Dpr_Battle_Logic_BTL_POKEPARAM__EndGMode (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, const MethodInfo* method_info);
uint8_t Dpr_Battle_Logic_BTL_POKEPARAM__GetGModePassedTurnCount (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, const MethodInfo* method_info);
void Dpr_Battle_Logic_BTL_POKEPARAM__IncGModePassedTurnCount (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, const MethodInfo* method_info);
bool Dpr_Battle_Logic_BTL_POKEPARAM__IsSpecialGEnable (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, const MethodInfo* method_info);
void Dpr_Battle_Logic_BTL_POKEPARAM__ReflectForExpUI (Dpr_Battle_Logic_BTL_POKEPARAM_o* __this, Pml_PokePara_PokemonParam_o* pp, const MethodInfo* method_info);
void Dpr_Battle_Logic_BTL_POKEPARAM___cctor (const MethodInfo* method_info);
