#pragma once

#include "il2cpp.h"

void Dpr_Battle_Logic_ServerCommandPutter__SCQUE_PUT_OP_HpMinus (Dpr_Battle_Logic_ServerCommandQueue_o* queue, uint8_t pokeID, uint16_t value, uint8_t damageCause, uint8_t damageCausePokeID, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__SCQUE_PUT_OP_HpMinusForSyncWazaEffect (Dpr_Battle_Logic_ServerCommandQueue_o* queue, uint8_t pokeID, uint16_t value, uint8_t damageCause, uint8_t damageCausePokeID, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__SCQUE_PUT_OP_HpPlus (Dpr_Battle_Logic_ServerCommandQueue_o* queue, uint8_t pokeID, uint16_t value, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__SCQUE_PUT_OP_HpZero (Dpr_Battle_Logic_ServerCommandQueue_o* queue, uint8_t pokeID, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__SCQUE_PUT_OP_PPMinus (Dpr_Battle_Logic_ServerCommandQueue_o* queue, uint8_t pokeID, uint8_t wazaIdx, uint8_t value, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__SCQUE_PUT_OP_PPMinus_Org (Dpr_Battle_Logic_ServerCommandQueue_o* queue, uint8_t pokeID, uint8_t wazaIdx, uint8_t value, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__SCQUE_PUT_OP_WazaUsed (Dpr_Battle_Logic_ServerCommandQueue_o* queue, uint8_t pokeID, uint8_t wazaIdx, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__SCQUE_PUT_OP_IncWazaUsedCount (Dpr_Battle_Logic_ServerCommandQueue_o* queue, uint8_t pokeID, uint8_t wazaIdx, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__SCQUE_PUT_OP_IncWazaKillCount (Dpr_Battle_Logic_ServerCommandQueue_o* queue, uint8_t pokeID, uint8_t wazaIdx, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__SCQUE_PUT_OP_PPPlus (Dpr_Battle_Logic_ServerCommandQueue_o* queue, uint8_t pokeID, uint8_t wazaIdx, uint8_t value, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__SCQUE_PUT_OP_PPPlus_Org (Dpr_Battle_Logic_ServerCommandQueue_o* queue, uint8_t pokeID, uint8_t wazaIdx, uint8_t value, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__SCQUE_PUT_OP_RankUp (Dpr_Battle_Logic_ServerCommandQueue_o* queue, uint8_t pokeID, uint8_t statusType, uint8_t volume, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__SCQUE_PUT_OP_RankDown (Dpr_Battle_Logic_ServerCommandQueue_o* queue, uint8_t pokeID, uint8_t statusType, uint8_t volume, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__SCQUE_PUT_OP_RankSet8 (Dpr_Battle_Logic_ServerCommandQueue_o* queue, uint8_t pokeID, uint8_t atk, uint8_t def, uint8_t sp_atk, uint8_t sp_def, uint8_t agi, uint8_t hit, uint8_t avoid, uint8_t critical, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__SCQUE_PUT_OP_RankRecover (Dpr_Battle_Logic_ServerCommandQueue_o* queue, uint8_t pokeID, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__SCQUE_PUT_OP_RankUpReset (Dpr_Battle_Logic_ServerCommandQueue_o* queue, uint8_t pokeID, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__SCQUE_PUT_OP_RankReset (Dpr_Battle_Logic_ServerCommandQueue_o* queue, uint8_t pokeID, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__SCQUE_PUT_OP_AddCritical (Dpr_Battle_Logic_ServerCommandQueue_o* queue, uint8_t pokeID, int32_t value, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__SCQUE_PUT_OP_SetSick (Dpr_Battle_Logic_ServerCommandQueue_o* queue, uint8_t pokeID, uint8_t sick, Dpr_Battle_Logic_BTL_SICKCONT_o* contParam, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__SCQUE_PUT_OP_CurePokeSick (Dpr_Battle_Logic_ServerCommandQueue_o* queue, uint8_t pokeID, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__SCQUE_PUT_OP_CureWazaSick (Dpr_Battle_Logic_ServerCommandQueue_o* queue, uint8_t pokeID, uint16_t sickID, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__SCQUE_PUT_OP_MemberIn (Dpr_Battle_Logic_ServerCommandQueue_o* queue, uint8_t clientID, uint8_t posIdx, uint8_t memberIdx, uint16_t turnCount, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__SCQUE_PUT_OP_SetStatus (Dpr_Battle_Logic_ServerCommandQueue_o* queue, uint8_t pokeID, uint8_t vid, uint16_t value, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__SCQUE_PUT_OP_SetWeight (Dpr_Battle_Logic_ServerCommandQueue_o* queue, uint8_t pokeID, uint16_t weight, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__SCQUE_PUT_OP_WazaSickTurnCheck (Dpr_Battle_Logic_ServerCommandQueue_o* queue, uint8_t pokeID, int32_t sick, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__SCQUE_PUT_OP_ChangePokeType (Dpr_Battle_Logic_ServerCommandQueue_o* queue, uint8_t pokeID, uint16_t nextType, int32_t exTypeCause, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__SCQUE_PUT_OP_ExPokeType (Dpr_Battle_Logic_ServerCommandQueue_o* queue, uint8_t pokeID, uint8_t exType, int32_t exTypeCause, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__SCQUE_PUT_OP_ConsumeItem (Dpr_Battle_Logic_ServerCommandQueue_o* queue, uint8_t pokeID, uint16_t itemID, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__SCQUE_PUT_OP_UpdateWazaProcResult (Dpr_Battle_Logic_ServerCommandQueue_o* queue, uint8_t pokeID, uint8_t actTargetPos, uint8_t actWazaType, bool fActEnable, int32_t actWaza, int32_t orgWaza, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__SCQUE_PUT_OP_SetTurnFlag (Dpr_Battle_Logic_ServerCommandQueue_o* queue, uint8_t pokeID, int32_t flag, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__SCQUE_PUT_OP_ResetTurnFlag (Dpr_Battle_Logic_ServerCommandQueue_o* queue, uint8_t pokeID, int32_t flag, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__SCQUE_PUT_OP_SetContFlag (Dpr_Battle_Logic_ServerCommandQueue_o* queue, uint8_t pokeID, int32_t flag, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__SCQUE_PUT_OP_ResetContFlag (Dpr_Battle_Logic_ServerCommandQueue_o* queue, uint8_t pokeID, int32_t flag, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__SCQUE_PUT_OP_SetPermFlag (Dpr_Battle_Logic_ServerCommandQueue_o* queue, uint8_t pokeID, int32_t flag, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__SCQUE_PUT_OP_IncPokeTurnCount (Dpr_Battle_Logic_ServerCommandQueue_o* queue, uint8_t pokeID, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__SCQUE_PUT_OP_ChangeTokusei (Dpr_Battle_Logic_ServerCommandQueue_o* queue, uint8_t pokeID, int32_t tokusei, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__SCQUE_PUT_OP_SetItem (Dpr_Battle_Logic_ServerCommandQueue_o* queue, uint8_t pokeID, uint16_t itemID, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__SCQUE_PUT_OP_UpdateWaza (Dpr_Battle_Logic_ServerCommandQueue_o* queue, uint8_t pokeID, uint8_t wazaIdx, int32_t wazaID, uint8_t ppMax, bool fPermanent, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__SCQUE_PUT_OP_OutClear (Dpr_Battle_Logic_ServerCommandQueue_o* queue, uint8_t pokeID, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__SCQUE_PUT_OP_DeadClear (Dpr_Battle_Logic_ServerCommandQueue_o* queue, uint8_t pokeID, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__SCQUE_PUT_OP_SetBattleFlag (Dpr_Battle_Logic_ServerCommandQueue_o* queue, uint16_t flag, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__SCQUE_PUT_OP_RemoveBattleFlag (Dpr_Battle_Logic_ServerCommandQueue_o* queue, uint16_t flag, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__SCQUE_PUT_OP_IncBattleCount (Dpr_Battle_Logic_ServerCommandQueue_o* queue, uint8_t counterID, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__SCQUE_PUT_OP_DecBattleCount (Dpr_Battle_Logic_ServerCommandQueue_o* queue, uint8_t counterID, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__SCQUE_PUT_OP_IncBattleCount (Dpr_Battle_Logic_ServerCommandQueue_o* queue, uint8_t counterID, int32_t clientID, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__SCQUE_PUT_OP_IncBattleCount (Dpr_Battle_Logic_ServerCommandQueue_o* queue, uint8_t counterID, int32_t side, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__SCQUE_OP_ChangeGround (Dpr_Battle_Logic_ServerCommandQueue_o* queue, uint8_t ground, Dpr_Battle_Logic_BTL_SICKCONT_o* contParam, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__SCQUE_PUT_OP_AddFieldEffect (Dpr_Battle_Logic_ServerCommandQueue_o* queue, int32_t effect, Dpr_Battle_Logic_BTL_SICKCONT_o* cont, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__SCQUE_PUT_OP_RemoveFieldEffect (Dpr_Battle_Logic_ServerCommandQueue_o* queue, int32_t effect, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__SCQUE_PUT_OP_AddFieldEffectDepend (Dpr_Battle_Logic_ServerCommandQueue_o* queue, int32_t effect, uint8_t pokeID, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__SCQUE_PUT_OP_DeleteDependPokeFieldEffect (Dpr_Battle_Logic_ServerCommandQueue_o* queue, uint8_t causedPokeID, int32_t fieldEffect, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__SCQUE_PUT_OP_SetPokeCounter (Dpr_Battle_Logic_ServerCommandQueue_o* queue, uint8_t pokeID, uint8_t counterID, uint8_t value, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__SCQUE_PUT_OP_SetPokePermCounter (Dpr_Battle_Logic_ServerCommandQueue_o* queue, uint8_t pokeID, uint8_t counterID, uint32_t value, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__SCQUE_PUT_OP_AddPokePermCounter (Dpr_Battle_Logic_ServerCommandQueue_o* queue, uint8_t pokeID, uint8_t counterID, uint32_t value, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__SCQUE_PUT_OP_IncKillCount (Dpr_Battle_Logic_ServerCommandQueue_o* queue, uint8_t pokeID, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__SCQUE_PUT_OP_BatonTouch (Dpr_Battle_Logic_ServerCommandQueue_o* queue, uint8_t userPokeID, uint8_t targetPokeID, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__SCQUE_PUT_OP_MigawariCreate (Dpr_Battle_Logic_ServerCommandQueue_o* queue, uint8_t pokeID, uint16_t migawariHP, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__SCQUE_PUT_OP_MigawariDelete (Dpr_Battle_Logic_ServerCommandQueue_o* queue, uint8_t pokeID, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__SCQUE_PUT_OP_SetIllusionForParty (Dpr_Battle_Logic_ServerCommandQueue_o* queue, int32_t clientID, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__SCQUE_PUT_OP_FakeDisable (Dpr_Battle_Logic_ServerCommandQueue_o* queue, uint8_t pokeID, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__SCQUE_PUT_OP_ClearConsumedItem (Dpr_Battle_Logic_ServerCommandQueue_o* queue, uint8_t pokeID, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__SCQUE_PUT_OP_CureDependPokeSick (Dpr_Battle_Logic_ServerCommandQueue_o* queue, uint8_t pokeID, uint8_t causePokeID, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__SCQUE_OP_AddWazaDmgRec (Dpr_Battle_Logic_ServerCommandQueue_o* queue, uint8_t defPokeID, uint8_t atkPokeID, uint8_t atkPokePos, uint8_t wazaType, int32_t damageType, uint16_t wazaID, uint16_t damage, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__SCQUE_PUT_OP_TurnCheck (Dpr_Battle_Logic_ServerCommandQueue_o* queue, uint8_t pokeID, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__SCQUE_PUT_OP_IncFieldTurn (Dpr_Battle_Logic_ServerCommandQueue_o* queue, int32_t effect, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__SCQUE_PUT_OP_Doryoku (Dpr_Battle_Logic_ServerCommandQueue_o* queue, uint8_t pokeID, uint8_t hp, uint8_t pow, uint8_t def, uint8_t sp_pow, uint8_t sp_def, uint8_t agi, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__SCQUE_PUT_OP_AddEffort_G (Dpr_Battle_Logic_ServerCommandQueue_o* queue, uint8_t pokeID, uint8_t value, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__SCQUE_OP_StartPosEffect (Dpr_Battle_Logic_ServerCommandQueue_o* queue, int32_t effect, uint8_t pos, uint32_t effectParam, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__SCQUE_OP_RemovePosEffect (Dpr_Battle_Logic_ServerCommandQueue_o* queue, int32_t effect, uint8_t pos, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__SCQUE_OP_UpdatePosEffectParam (Dpr_Battle_Logic_ServerCommandQueue_o* queue, int32_t effect, uint8_t pos, uint32_t effectParam, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__SCQUE_PUT_OP_PGLRecord (Dpr_Battle_Logic_ServerCommandQueue_o* queue, uint8_t defPokeID, uint8_t atkPokeID, uint16_t atkWazaNo, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__SCQUE_PUT_OP_SideEffect_Add (Dpr_Battle_Logic_ServerCommandQueue_o* queue, int32_t side, int32_t sideEffect, Dpr_Battle_Logic_BTL_SICKCONT_o* contParam, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__SCQUE_PUT_OP_SideEffect_Remove (Dpr_Battle_Logic_ServerCommandQueue_o* queue, int32_t side, int32_t sideEffect, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__SCQUE_PUT_OP_SideEffect_IncTurnCount (Dpr_Battle_Logic_ServerCommandQueue_o* queue, int32_t side, int32_t sideEffect, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__SCQUE_PUT_OP_SideEffect_Swap (Dpr_Battle_Logic_ServerCommandQueue_o* queue, int32_t side1, int32_t side2, int32_t sideEffect, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__SCQUE_PUT_OP_PublishClientInformation_AppearedPokemon (Dpr_Battle_Logic_ServerCommandQueue_o* queue, uint8_t appeardPokeId, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__SCQUE_PUT_OP_PublishClientInformation_HavePokemonItem (Dpr_Battle_Logic_ServerCommandQueue_o* queue, uint8_t pokeID, bool haveItem, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__SCQUE_PUT_ACT_WazaEffect (Dpr_Battle_Logic_ServerCommandQueue_o* queue, uint8_t atPokePos, uint8_t defPokePos, int32_t waza, uint8_t wazaType, uint8_t arg, uint8_t pluralHitIndex, bool bSyncDamageEffect, bool isGShockOccur, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__SCQUE_PUT_ACT_TameWazaHide (Dpr_Battle_Logic_ServerCommandQueue_o* queue, uint8_t pokeID, bool hideFlag, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__SCQUE_PUT_ACT_WazaDamage (Dpr_Battle_Logic_ServerCommandQueue_o* queue, uint8_t defPokeID, int32_t affAbout, int32_t wazaID, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__SCQUE_PUT_ACT_WazaDamagePlural (Dpr_Battle_Logic_ServerCommandQueue_o* queue, uint8_t pokeCnt, uint8_t affAbout, uint16_t wazaID, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__SCQUE_PUT_ACT_MigawariDamage (Dpr_Battle_Logic_ServerCommandQueue_o* queue, uint8_t defPokeID, int32_t affine, int32_t waza, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__SCQUE_PUT_ACT_WazaIchigeki (Dpr_Battle_Logic_ServerCommandQueue_o* queue, uint8_t pokeID, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__SCQUE_PUT_ACT_SickIcon (Dpr_Battle_Logic_ServerCommandQueue_o* queue, uint8_t pokeID, uint32_t sick, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__SCQUE_PUT_ACT_ConfDamage (Dpr_Battle_Logic_ServerCommandQueue_o* queue, uint8_t pokeID, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__SCQUE_PUT_ACT_RankUp (Dpr_Battle_Logic_ServerCommandQueue_o* queue, uint8_t pokeID, uint8_t statusType, uint8_t volume, uint8_t viewType, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__SCQUE_PUT_ACT_RankDown (Dpr_Battle_Logic_ServerCommandQueue_o* queue, uint8_t pokeID, uint8_t statusType, uint8_t volume, uint8_t viewType, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__SCQUE_PUT_ACT_Dead (Dpr_Battle_Logic_ServerCommandQueue_o* queue, uint8_t pokeID, bool isKillCountEffect, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__SCQUE_PUT_ACT_RelivePoke (Dpr_Battle_Logic_ServerCommandQueue_o* queue, uint8_t pokeID, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__SCQUE_PUT_ACT_MemberOutMsg (Dpr_Battle_Logic_ServerCommandQueue_o* queue, uint8_t clientID, uint8_t pokeID, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__SCQUE_PUT_ACT_MemberOut (Dpr_Battle_Logic_ServerCommandQueue_o* queue, uint8_t pos, uint16_t effectNo, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__SCQUE_PUT_ACT_MemberIn (Dpr_Battle_Logic_ServerCommandQueue_o* queue, uint8_t clientID, uint8_t posIdx, uint8_t memberIdx, bool fPutMsg, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__SCQUE_PUT_ACTOP_WeatherStart (Dpr_Battle_Logic_ServerCommandQueue_o* queue, uint8_t weather, uint8_t turn, uint8_t turnUpCount, uint8_t causePokeID, uint8_t cause, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__SCQUE_PUT_ACT_WeatherEnd (Dpr_Battle_Logic_ServerCommandQueue_o* queue, uint8_t weather, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__SCQUE_PUT_OP_WeatherEnd (Dpr_Battle_Logic_ServerCommandQueue_o* queue, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__SCQUE_PUT_ACT_SimpleHP (Dpr_Battle_Logic_ServerCommandQueue_o* queue, uint8_t pokeID, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__SCQUE_PUT_ACT_USE_ITEM (Dpr_Battle_Logic_ServerCommandQueue_o* queue, uint8_t pokeID, uint8_t bNuts, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__SCQUE_PUT_ACT_KINOMI_PRE_WAZA (Dpr_Battle_Logic_ServerCommandQueue_o* queue, uint8_t pokeCnt, uint8_t pokeID_1, uint8_t pokeID_2, uint8_t pokeID_3, uint8_t pokeID_4, uint8_t pokeID_5, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__SCQUE_PUT_ACT_Kill (Dpr_Battle_Logic_ServerCommandQueue_o* queue, uint8_t pokeID, uint8_t effectType, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__SCQUE_PUT_OP_MemberMove (Dpr_Battle_Logic_ServerCommandQueue_o* queue, uint8_t clientID, uint8_t pos1, uint8_t pos2, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__SCQUE_PUT_ACT_MemberMove (Dpr_Battle_Logic_ServerCommandQueue_o* queue, uint8_t clientID, uint8_t pos1, uint8_t pos2, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__SCQUE_PUT_ACT_AddExp_InitParam (Dpr_Battle_Logic_ServerCommandQueue_o* queue, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__SCQUE_PUT_ACT_AddExp_AddParam (Dpr_Battle_Logic_ServerCommandQueue_o* queue, uint8_t pokeID, uint32_t exp, uint32_t effort_hp, uint32_t effort_pow, uint32_t effort_def, uint32_t effort_sp_pow, uint32_t effort_sp_def, uint32_t effort_agi, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__SCQUE_PUT_ACT_AddExp (Dpr_Battle_Logic_ServerCommandQueue_o* queue, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__SCQUE_PUT_OP_AddExp (Dpr_Battle_Logic_ServerCommandQueue_o* queue, uint8_t pokeID, uint32_t exp, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__SCQUE_PUT_ACT_BallThrow (Dpr_Battle_Logic_ServerCommandQueue_o* queue, uint8_t userPos, uint8_t targetPos, uint8_t yureCnt, bool fSuccess, bool fZukanRegister, bool fCritical, uint16_t ballItemID, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__SCQUE_PUT_ACT_BallThrow_Captured (Dpr_Battle_Logic_ServerCommandQueue_o* queue, uint8_t pos, bool bZukanRegister, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__SCQUE_PUT_ACT_BallThrowForbidden (Dpr_Battle_Logic_ServerCommandQueue_o* queue, uint8_t targetPos, uint16_t ballItemID, uint8_t cause, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__SCQUE_PUT_ACTOP_ChangeTokusei (Dpr_Battle_Logic_ServerCommandQueue_o* queue, uint8_t pokeID, uint16_t tokuseiID, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__SCQUE_PUT_ACTOP_SkillSwap (Dpr_Battle_Logic_ServerCommandQueue_o* queue, uint8_t pokeID_1, uint8_t pokeID_2, int32_t tokID_1, int32_t tokID_2, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__SCQUE_PUT_ACT_FakeDisable (Dpr_Battle_Logic_ServerCommandQueue_o* queue, uint8_t pokeID, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__SCQUE_PUT_ACT_EffectSimple (Dpr_Battle_Logic_ServerCommandQueue_o* queue, uint16_t effectNo, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__SCQUE_PUT_ACT_EffectByPos (Dpr_Battle_Logic_ServerCommandQueue_o* queue, uint8_t pos, uint16_t effectNo, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__SCQUE_PUT_ACT_EffectByVector (Dpr_Battle_Logic_ServerCommandQueue_o* queue, uint8_t pos_from, uint8_t pos_to, uint16_t effectNo, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__SCQUE_PUT_ACT_EffectBySide (Dpr_Battle_Logic_ServerCommandQueue_o* queue, uint8_t pos_from, uint8_t pos_to, uint16_t effectNo, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__SCQUE_PUT_ACT_ChangeGround (Dpr_Battle_Logic_ServerCommandQueue_o* queue, uint8_t ground, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__SCQUE_PUT_ACT_ExPlural2ndHit (Dpr_Battle_Logic_ServerCommandQueue_o* queue, uint8_t pos, uint16_t effectNo, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__SCQUE_PUT_ACT_ChangeForm (Dpr_Battle_Logic_ServerCommandQueue_o* queue, uint8_t pokeID, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__SCQUE_PUT_OP_ChangeForm (Dpr_Battle_Logic_ServerCommandQueue_o* queue, uint8_t pokeID, uint8_t formNo, bool dontResetFormByOut, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__SCQUE_PUT_OP_Hensin (Dpr_Battle_Logic_ServerCommandQueue_o* queue, uint8_t userID, uint8_t targetID, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__SCQUE_PUT_OP_AddWazaHandler (Dpr_Battle_Logic_ServerCommandQueue_o* queue, uint8_t pokeID, int32_t waza, uint32_t subPri, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__SCQUE_PUT_OP_RemoveWazaHandler (Dpr_Battle_Logic_ServerCommandQueue_o* queue, uint8_t pokeID, int32_t waza, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__SCQUE_PUT_OP_RemoveForceWazaHandler (Dpr_Battle_Logic_ServerCommandQueue_o* queue, uint8_t pokeID, int32_t waza, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__SCQUE_PUT_OP_RemoveForceAllWazaHandler (Dpr_Battle_Logic_ServerCommandQueue_o* queue, uint8_t pokeID, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__SCQUE_PUT_OP_AddTokuseiHandler (Dpr_Battle_Logic_ServerCommandQueue_o* queue, uint8_t pokeID, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__SCQUE_PUT_OP_RemoveTokuseiHandler (Dpr_Battle_Logic_ServerCommandQueue_o* queue, uint8_t pokeID, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__SCQUE_PUT_OP_SwapTokuseiHandler (Dpr_Battle_Logic_ServerCommandQueue_o* queue, uint8_t pokeID1, uint8_t pokeID2, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__SCQUE_PUT_OP_AddItemHandler (Dpr_Battle_Logic_ServerCommandQueue_o* queue, uint8_t pokeID, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__SCQUE_PUT_OP_RemoveItemHandler (Dpr_Battle_Logic_ServerCommandQueue_o* queue, uint8_t pokeID, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__SCQUE_PUT_OP_AddPosEffectHandler (Dpr_Battle_Logic_ServerCommandQueue_o* queue, int32_t effect, uint8_t pos, uint8_t pokeID, System_Int32_array* param, uint8_t param_cnt, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__SCQUE_PUT_OP_RemovePosHandler (Dpr_Battle_Logic_ServerCommandQueue_o* queue, int32_t effect, uint8_t pos, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__SCQUE_PUT_OP_AddSideHandler (Dpr_Battle_Logic_ServerCommandQueue_o* queue, int32_t side, int32_t sideEffect, Dpr_Battle_Logic_BTL_SICKCONT_o* contParam, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__SCQUE_PUT_OP_RemoveSideHandler (Dpr_Battle_Logic_ServerCommandQueue_o* queue, int32_t side, int32_t sideEffect, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__SCQUE_PUT_OP_SleepSideHandler (Dpr_Battle_Logic_ServerCommandQueue_o* queue, int32_t side, int32_t sideEffect, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__SCQUE_PUT_OP_WakeSideHandler (Dpr_Battle_Logic_ServerCommandQueue_o* queue, int32_t side, int32_t sideEffect, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__SCQUE_PUT_OP_AddFieldHandler (Dpr_Battle_Logic_ServerCommandQueue_o* queue, int32_t effect, uint8_t sub_param, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__SCQUE_PUT_OP_RemoveFieldHandler (Dpr_Battle_Logic_ServerCommandQueue_o* queue, int32_t effect, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__SCQUE_PUT_OP_AddDefaultPowerUpHandler (Dpr_Battle_Logic_ServerCommandQueue_o* queue, uint8_t pokeID, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__SCQUE_PUT_OP_RemoveDefaultPowerUpHandler (Dpr_Battle_Logic_ServerCommandQueue_o* queue, uint8_t pokeID, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__SCQUE_PUT_OP_AddRaidBossHandler (Dpr_Battle_Logic_ServerCommandQueue_o* queue, uint8_t pokeID, int32_t handlerType, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__SCQUE_PUT_OP_RemoveRaidBossHandler (Dpr_Battle_Logic_ServerCommandQueue_o* queue, uint8_t pokeID, int32_t handlerType, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__SCQUE_PUT_ACT_MigawariCreate (Dpr_Battle_Logic_ServerCommandQueue_o* queue, uint8_t pos, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__SCQUE_PUT_ACT_MigawariDelete (Dpr_Battle_Logic_ServerCommandQueue_o* queue, uint8_t pos, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__SCQUE_PUT_ACT_Hensin (Dpr_Battle_Logic_ServerCommandQueue_o* queue, uint8_t atkPokeID, uint8_t tgtPokeID, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__SCQUE_PUT_ACT_PlayWinBGM (Dpr_Battle_Logic_ServerCommandQueue_o* queue, uint32_t bgmNo, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__SCQUE_PUT_ACT_MsgWinHide (Dpr_Battle_Logic_ServerCommandQueue_o* queue, uint8_t dmy, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__SCQUE_PUT_ACT_FriendshipEffect (Dpr_Battle_Logic_ServerCommandQueue_o* queue, uint8_t pokeID, int32_t effect, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__SCQUE_PUT_ACT_FriendshipEffectWithMsg (Dpr_Battle_Logic_ServerCommandQueue_o* queue, uint8_t pokeID, int32_t effect, int32_t msgType, uint16_t strID, uint16_t arg1, uint16_t arg2, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__SCQUE_PUT_OP_INC_WEATHER_PASSED_TURN (Dpr_Battle_Logic_ServerCommandQueue_o* queue, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__SCQUE_PUT_OP_SET_SPACT_PRIORITY (Dpr_Battle_Logic_ServerCommandQueue_o* queue, uint8_t pokeID, uint8_t priority, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__SCQUE_PUT_OP_SetActionRecord (Dpr_Battle_Logic_ServerCommandQueue_o* queue, uint8_t pokeID, uint8_t actionID, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__SCQUE_PUT_OP_AddEscapeInfo (Dpr_Battle_Logic_ServerCommandQueue_o* queue, int32_t clientID, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__SCQUE_PUT_ACT_TurnStart (Dpr_Battle_Logic_ServerCommandQueue_o* queue, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__SCQUE_PUT_OP_GWallBreak (Dpr_Battle_Logic_ServerCommandQueue_o* queue, uint8_t pokeID, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__SCQUE_PUT_OP_GWallGaugeAdd (Dpr_Battle_Logic_ServerCommandQueue_o* queue, uint8_t pokeID, uint8_t value, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__SCQUE_PUT_OP_GWallGaugeSub (Dpr_Battle_Logic_ServerCommandQueue_o* queue, uint8_t pokeID, uint8_t value, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__SCQUE_PUT_OP_GWallGaugeInit (Dpr_Battle_Logic_ServerCommandQueue_o* queue, uint8_t pokeID, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__SCQUE_PUT_OP_DecGWallRepairTurnCount (Dpr_Battle_Logic_ServerCommandQueue_o* queue, uint8_t pokeID, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__SCQUE_PUT_OP_RepairGWall (Dpr_Battle_Logic_ServerCommandQueue_o* queue, uint8_t pokeID, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__SCQUE_PUT_OP_G_Start (Dpr_Battle_Logic_ServerCommandQueue_o* queue, uint8_t pokeID, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__SCQUE_PUT_OP_G_End (Dpr_Battle_Logic_ServerCommandQueue_o* queue, uint8_t pokeID, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__SCQUE_PUT_OP_G_IncTurn (Dpr_Battle_Logic_ServerCommandQueue_o* queue, uint8_t pokeID, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__SCQUE_PUT_OP_GGauge_Inc (Dpr_Battle_Logic_ServerCommandQueue_o* queue, int32_t clientID, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__SCQUE_PUT_OP_GGauge_Empty (Dpr_Battle_Logic_ServerCommandQueue_o* queue, int32_t clientID, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__SCQUE_PUT_ACT_G_Start (Dpr_Battle_Logic_ServerCommandQueue_o* queue, uint8_t pokeID, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__SCQUE_PUT_ACT_G_End (Dpr_Battle_Logic_ServerCommandQueue_o* queue, uint8_t pokeID, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__SCQUE_PUT_OP_RaidBoss_DecReinforceTurn (Dpr_Battle_Logic_ServerCommandQueue_o* queue, uint8_t pokeID, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__SCQUE_PUT_OP_RaidBoss_SetReinforceTurn (Dpr_Battle_Logic_ServerCommandQueue_o* queue, uint8_t pokeID, uint8_t turn, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__SCQUE_PUT_OP_RaidBoss_SetAngry (Dpr_Battle_Logic_ServerCommandQueue_o* queue, uint8_t pokeID, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__SCQUE_PUT_OP_RaidBoss_GWazaUseSchedule_DecTurn (Dpr_Battle_Logic_ServerCommandQueue_o* queue, uint8_t pokeID, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__SCQUE_PUT_OP_RaidBoss_GWazaUseSchedule_SetUsed (Dpr_Battle_Logic_ServerCommandQueue_o* queue, uint8_t pokeID, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__SCQUE_PUT_OP_RaidBoss_GWazaUseSchedule_Reset (Dpr_Battle_Logic_ServerCommandQueue_o* queue, uint8_t pokeID, uint8_t turn, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__SCQUE_PUT_OP_TransferGRights (Dpr_Battle_Logic_ServerCommandQueue_o* queue, int32_t side, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__SCQUE_PUT_OP_IncGRightsPassedTurnCount (Dpr_Battle_Logic_ServerCommandQueue_o* queue, int32_t side, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__SCQUE_PUT_OP_InvalidateGRights (Dpr_Battle_Logic_ServerCommandQueue_o* queue, int32_t clientID, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__SCQUE_PUT_ACT_GetGRights (Dpr_Battle_Logic_ServerCommandQueue_o* queue, int32_t clientID, bool canAnotherClientDisplayMessage, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__SCQUE_PUT_RaidBattleStatus_IncAllDeadCount (Dpr_Battle_Logic_ServerCommandQueue_o* queue, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__SCQUE_PUT_RaidBattleStatus_IncTurnCountAfterAllDead (Dpr_Battle_Logic_ServerCommandQueue_o* queue, int32_t clientID, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__SCQUE_PUT_RaidBattleStatus_ResetTurnCountAfterAllDead (Dpr_Battle_Logic_ServerCommandQueue_o* queue, int32_t clientID, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__SCQUE_PUT_ACT_RaidResult (Dpr_Battle_Logic_ServerCommandQueue_o* queue, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__SCQUE_PUT_TOKWIN_IN (Dpr_Battle_Logic_ServerCommandQueue_o* queue, uint8_t pokeID, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__SCQUE_PUT_TOKWIN_OUT (Dpr_Battle_Logic_ServerCommandQueue_o* queue, uint8_t pokeID, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__SCQUE_PUT_MSG_WAZA (Dpr_Battle_Logic_ServerCommandQueue_o* queue, uint8_t pokeID, uint16_t waza, uint8_t targetPos, bool needMsgDisplay, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__SCQUE_PUT_MSG_WAZA_ToReservedPos (Dpr_Battle_Logic_ServerCommandQueue_o* queue, uint8_t pokeID, uint16_t waza, uint8_t targetPos, bool needMsgDisplay, uint16_t reservedPos, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__SCQUE_PUT_MSG_STD (Dpr_Battle_Logic_ServerCommandQueue_o* queue, System_Int32_array* args, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__SCQUE_PUT_MSG_SET (Dpr_Battle_Logic_ServerCommandQueue_o* queue, System_Int32_array* args, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__SCQUE_PUT_MSG_STD_SE (Dpr_Battle_Logic_ServerCommandQueue_o* queue, System_Int32_array* args, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__SCQUE_PUT_MSG_SET_SE (Dpr_Battle_Logic_ServerCommandQueue_o* queue, System_Int32_array* args, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__SCQUE_PUT_MSG_STD_TO_RESERVED_POS (Dpr_Battle_Logic_ServerCommandQueue_o* queue, uint16_t pos, System_Int32_array* args, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__SCQUE_PUT_MSG_SET_TO_RESERVED_POS (Dpr_Battle_Logic_ServerCommandQueue_o* queue, uint16_t pos, System_Int32_array* args, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__SCQUE_PUT_ACT_Safari (Dpr_Battle_Logic_ServerCommandQueue_o* queue, uint8_t pokeID, uint8_t param0, uint8_t param1, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter___ctor (Dpr_Battle_Logic_ServerCommandPutter_o* __this, Dpr_Battle_Logic_ServerCommandPutter_SetupParam_o** param, const MethodInfo* method_info);
bool Dpr_Battle_Logic_ServerCommandPutter__Message (Dpr_Battle_Logic_ServerCommandPutter_o* __this, Dpr_Battle_Logic_StrParam_o** strParam, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__Message_Std (Dpr_Battle_Logic_ServerCommandPutter_o* __this, uint16_t strID, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__Message_Std (Dpr_Battle_Logic_ServerCommandPutter_o* __this, uint16_t strID, int32_t arg, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__Message_Std (Dpr_Battle_Logic_ServerCommandPutter_o* __this, uint16_t strID, int32_t arg1, int32_t arg2, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__Message_Std (Dpr_Battle_Logic_ServerCommandPutter_o* __this, uint16_t strID, int32_t arg1, int32_t arg2, int32_t arg3, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__Message_Std (Dpr_Battle_Logic_ServerCommandPutter_o* __this, uint16_t strID, int32_t arg1, int32_t arg2, int32_t arg3, int32_t arg4, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__Message_StdEx (Dpr_Battle_Logic_ServerCommandPutter_o* __this, uint16_t strID, uint32_t argsCount, System_Int32_array* args, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__Message_StdSE (Dpr_Battle_Logic_ServerCommandPutter_o* __this, uint16_t strID, uint32_t SENo, uint32_t argsCount, System_Int32_array* args, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__Message_Set (Dpr_Battle_Logic_ServerCommandPutter_o* __this, Dpr_Battle_Logic_BTL_POKEPARAM_o* poke, uint16_t strID, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__Message_Set (Dpr_Battle_Logic_ServerCommandPutter_o* __this, uint16_t strID, int32_t arg1, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__Message_Set (Dpr_Battle_Logic_ServerCommandPutter_o* __this, uint16_t strID, int32_t arg1, int32_t arg2, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__Message_SetEx (Dpr_Battle_Logic_ServerCommandPutter_o* __this, uint16_t strID, uint32_t argsCount, System_Int32_array* args, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__Message_SetSE (Dpr_Battle_Logic_ServerCommandPutter_o* __this, uint16_t strID, uint32_t SENo, uint32_t argsCount, System_Int32_array* args, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__Message_Waza (Dpr_Battle_Logic_ServerCommandPutter_o* __this, uint8_t attackerID, int32_t waza, uint8_t targetPos, bool needMsgDisplay, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__Message_Waza_ToReservedPos (Dpr_Battle_Logic_ServerCommandPutter_o* __this, uint8_t attackerID, int32_t waza, uint8_t targetPos, bool needMsgDisplay, uint16_t reservedPos, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__Message_DamageAffinity (Dpr_Battle_Logic_ServerCommandPutter_o* __this, int32_t affinity, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__Message_WazaAffinity (Dpr_Battle_Logic_ServerCommandPutter_o* __this, Dpr_Battle_Logic_BTL_POKEPARAM_o* attacker, uint32_t targetCount, Pml_Battle_TypeAffinity_AffinityID_array* affinityArray, Dpr_Battle_Logic_BTL_POKEPARAM_array* targets, bool isPluralHitWaza, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__Message_WazaFailed (Dpr_Battle_Logic_ServerCommandPutter_o* __this, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__Message_WazaAvoid (Dpr_Battle_Logic_ServerCommandPutter_o* __this, Dpr_Battle_Logic_BTL_POKEPARAM_o* defender, int32_t waza, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__Message_WazaAvoidByFriendship (Dpr_Battle_Logic_ServerCommandPutter_o* __this, Dpr_Battle_Logic_BTL_POKEPARAM_o* defender, int32_t waza, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__Message_NoEffect (Dpr_Battle_Logic_ServerCommandPutter_o* __this, Dpr_Battle_Logic_BTL_POKEPARAM_o* defender, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__Message_NoEffect_Ichigeki (Dpr_Battle_Logic_ServerCommandPutter_o* __this, Dpr_Battle_Logic_BTL_POKEPARAM_o* defender, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__Message_WazaExecuteFailed (Dpr_Battle_Logic_ServerCommandPutter_o* __this, Dpr_Battle_Logic_BTL_POKEPARAM_o* attacker, int32_t waza, uint8_t cause, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__Message_MemberOut (Dpr_Battle_Logic_ServerCommandPutter_o* __this, Dpr_Battle_Logic_BTL_POKEPARAM_o* bpp, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__Message_AffGoodFriendship (Dpr_Battle_Logic_ServerCommandPutter_o* __this, Dpr_Battle_Logic_BTL_POKEPARAM_o* poke, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__Message_AddSickFailed (Dpr_Battle_Logic_ServerCommandPutter_o* __this, Dpr_Battle_Logic_BTL_POKEPARAM_o* target, uint8_t failCode, int32_t sick, uint8_t cause, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__Message_SideEffectOff (Dpr_Battle_Logic_ServerCommandPutter_o* __this, int32_t side, int32_t sideEffect, const MethodInfo* method_info);
bool Dpr_Battle_Logic_ServerCommandPutter__ChangeGround (Dpr_Battle_Logic_ServerCommandPutter_o* __this, uint8_t ground, Dpr_Battle_Logic_BTL_SICKCONT_o* contParam, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__AddFieldEffect (Dpr_Battle_Logic_ServerCommandPutter_o* __this, int32_t effect, Dpr_Battle_Logic_BTL_SICKCONT_o* cont, const MethodInfo* method_info);
bool Dpr_Battle_Logic_ServerCommandPutter__RemoveFieldEffect (Dpr_Battle_Logic_ServerCommandPutter_o* __this, int32_t effect, const MethodInfo* method_info);
bool Dpr_Battle_Logic_ServerCommandPutter__IncFieldTurnCount (Dpr_Battle_Logic_ServerCommandPutter_o* __this, int32_t effect, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__AddFieldEffect_DependPoke (Dpr_Battle_Logic_ServerCommandPutter_o* __this, int32_t effect, uint8_t pokeID, const MethodInfo* method_info);
bool Dpr_Battle_Logic_ServerCommandPutter__RemoveFieldEffect_DependPoke (Dpr_Battle_Logic_ServerCommandPutter_o* __this, Dpr_Battle_Logic_BTL_POKEPARAM_o* causedPoke, int32_t fieldEffect, const MethodInfo* method_info);
bool Dpr_Battle_Logic_ServerCommandPutter__SideEffect_Add (Dpr_Battle_Logic_ServerCommandPutter_o* __this, int32_t side, int32_t sideEffect, Dpr_Battle_Logic_BTL_SICKCONT_o* contParam, const MethodInfo* method_info);
bool Dpr_Battle_Logic_ServerCommandPutter__SideEffect_Remove (Dpr_Battle_Logic_ServerCommandPutter_o* __this, int32_t side, int32_t sideEffect, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__SideEffect_IncTurnCount (Dpr_Battle_Logic_ServerCommandPutter_o* __this, int32_t side, int32_t sideEffect, const MethodInfo* method_info);
bool Dpr_Battle_Logic_ServerCommandPutter__SideEffect_Swap (Dpr_Battle_Logic_ServerCommandPutter_o* __this, int32_t side1, int32_t side2, int32_t sideEffect, const MethodInfo* method_info);
bool Dpr_Battle_Logic_ServerCommandPutter__PosEffect_Add (Dpr_Battle_Logic_ServerCommandPutter_o* __this, uint8_t effectPos, int32_t posEffect, Dpr_Battle_Logic_PosEffect_EffectParam_o* effectParam, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__EffectByPos (Dpr_Battle_Logic_ServerCommandPutter_o* __this, Dpr_Battle_Logic_BTL_POKEPARAM_o* poke, uint16_t effectNo, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__EffectByPos (Dpr_Battle_Logic_ServerCommandPutter_o* __this, uint8_t pos, uint16_t effectNo, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__EffectByClient (Dpr_Battle_Logic_ServerCommandPutter_o* __this, int32_t clientID, uint16_t effectNo, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__EffectBySide (Dpr_Battle_Logic_ServerCommandPutter_o* __this, uint8_t pos_from, uint8_t pos_to, uint16_t effectNo, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__ConfusionAct (Dpr_Battle_Logic_ServerCommandPutter_o* __this, Dpr_Battle_Logic_BTL_POKEPARAM_o* poke, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__MeromeroAct (Dpr_Battle_Logic_ServerCommandPutter_o* __this, Dpr_Battle_Logic_BTL_POKEPARAM_o* poke, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__UseItemAct (Dpr_Battle_Logic_ServerCommandPutter_o* __this, Dpr_Battle_Logic_BTL_POKEPARAM_o* poke, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__CantAction (Dpr_Battle_Logic_ServerCommandPutter_o* __this, Dpr_Battle_Logic_BTL_POKEPARAM_o* poke, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__MemberIn (Dpr_Battle_Logic_ServerCommandPutter_o* __this, uint8_t clientID, uint8_t posIdx, uint8_t nextPokeIdx, uint32_t turnCount, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__SetTurnFlag (Dpr_Battle_Logic_ServerCommandPutter_o* __this, Dpr_Battle_Logic_BTL_POKEPARAM_o* poke, int32_t flag, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__ResetTurnFlag (Dpr_Battle_Logic_ServerCommandPutter_o* __this, Dpr_Battle_Logic_BTL_POKEPARAM_o* poke, int32_t flag, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__SetContFlag (Dpr_Battle_Logic_ServerCommandPutter_o* __this, Dpr_Battle_Logic_BTL_POKEPARAM_o* poke, int32_t flag, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__ResetContFlag (Dpr_Battle_Logic_ServerCommandPutter_o* __this, Dpr_Battle_Logic_BTL_POKEPARAM_o* poke, int32_t flag, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__SetPermFlag (Dpr_Battle_Logic_ServerCommandPutter_o* __this, Dpr_Battle_Logic_BTL_POKEPARAM_o* poke, int32_t flag, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__SetBppCounter (Dpr_Battle_Logic_ServerCommandPutter_o* __this, Dpr_Battle_Logic_BTL_POKEPARAM_o* poke, int32_t counterID, uint8_t value, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__IncBppCounter (Dpr_Battle_Logic_ServerCommandPutter_o* __this, Dpr_Battle_Logic_BTL_POKEPARAM_o* poke, int32_t counterID, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__SetPokePermCounter (Dpr_Battle_Logic_ServerCommandPutter_o* __this, uint8_t pokeID, uint8_t counterID, uint32_t value, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__AddPokePermCounter (Dpr_Battle_Logic_ServerCommandPutter_o* __this, uint8_t pokeID, uint8_t counterID, uint32_t value, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__IncPokePermCounter (Dpr_Battle_Logic_ServerCommandPutter_o* __this, uint8_t pokeID, uint8_t counterID, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__IncTotalTurnCount (Dpr_Battle_Logic_ServerCommandPutter_o* __this, uint8_t pokeID, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__IncKillCount (Dpr_Battle_Logic_ServerCommandPutter_o* __this, uint8_t pokeID, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__SetItem (Dpr_Battle_Logic_ServerCommandPutter_o* __this, Dpr_Battle_Logic_BTL_POKEPARAM_o* poke, uint16_t itemID, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__ConsumeItem (Dpr_Battle_Logic_ServerCommandPutter_o* __this, Dpr_Battle_Logic_BTL_POKEPARAM_o* poke, uint16_t itemID, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__ClearConsumedItem (Dpr_Battle_Logic_ServerCommandPutter_o* __this, uint8_t pokeID, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__SimpleHp (Dpr_Battle_Logic_ServerCommandPutter_o* __this, Dpr_Battle_Logic_BTL_POKEPARAM_o* poke, int32_t value, uint8_t damageCause, uint8_t damageCausePokeID, bool isEffectEnable, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__DecreaseHP (Dpr_Battle_Logic_ServerCommandPutter_o* __this, Dpr_Battle_Logic_BTL_POKEPARAM_o* poke, uint32_t value, bool byWazaDamage, uint8_t damageCause, uint8_t damageCausePokeID, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__ConfDamage (Dpr_Battle_Logic_ServerCommandPutter_o* __this, Dpr_Battle_Logic_BTL_POKEPARAM_o* poke, uint32_t damage, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__HpZero (Dpr_Battle_Logic_ServerCommandPutter_o* __this, Dpr_Battle_Logic_BTL_POKEPARAM_o* poke, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__KillPokemon (Dpr_Battle_Logic_ServerCommandPutter_o* __this, Dpr_Battle_Logic_BTL_POKEPARAM_o* poke, uint8_t attackerID, uint8_t deadCause, uint8_t effectType, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__DecrementPP (Dpr_Battle_Logic_ServerCommandPutter_o* __this, Dpr_Battle_Logic_BTL_POKEPARAM_o* poke, uint8_t wazaIdx, uint8_t volume, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__RecoverPP (Dpr_Battle_Logic_ServerCommandPutter_o* __this, Dpr_Battle_Logic_BTL_POKEPARAM_o* poke, uint8_t wazaIdx, uint8_t volume, bool isOriginalWaza, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__AddSick (Dpr_Battle_Logic_ServerCommandPutter_o* __this, Dpr_Battle_Logic_BTL_POKEPARAM_o* target, int32_t sick, Dpr_Battle_Logic_BTL_SICKCONT_o* sickCont, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__CureSick (Dpr_Battle_Logic_ServerCommandPutter_o* __this, Dpr_Battle_Logic_BTL_POKEPARAM_o* poke, int32_t sick, Dpr_Battle_Logic_BTL_SICKCONT_o* pOldCont, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__CureDependPokeSick (Dpr_Battle_Logic_ServerCommandPutter_o* __this, Dpr_Battle_Logic_BTL_POKEPARAM_o* poke, Dpr_Battle_Logic_BTL_POKEPARAM_o* causedPoke, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__RankEffect (Dpr_Battle_Logic_ServerCommandPutter_o* __this, Dpr_Battle_Logic_BTL_POKEPARAM_o* target, int32_t effect, int32_t volume, uint16_t itemID, bool putStdMsg, uint8_t viewType, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__SetSpActPriority (Dpr_Battle_Logic_ServerCommandPutter_o* __this, Dpr_Battle_Logic_BTL_POKEPARAM_o* poke, uint8_t priority, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__Act_ChangeForm (Dpr_Battle_Logic_ServerCommandPutter_o* __this, uint8_t pokeID, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__ChangeForm (Dpr_Battle_Logic_ServerCommandPutter_o* __this, uint8_t pokeID, uint8_t formNo, bool dontResetFormByOut, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__AddWazaDamageRecord (Dpr_Battle_Logic_ServerCommandPutter_o* __this, Dpr_Battle_Logic_BTL_POKEPARAM_o* defender, Dpr_Battle_Logic_BTL_POKEPARAM_o* attacker, uint8_t atkPokePos, uint8_t wazaType, int32_t damageType, uint16_t wazaID, uint16_t damage, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__CopyBatonTouchParams (Dpr_Battle_Logic_ServerCommandPutter_o* __this, uint8_t userPokeID, uint8_t targetPokeID, const MethodInfo* method_info);
bool Dpr_Battle_Logic_ServerCommandPutter__ChangePokeType (Dpr_Battle_Logic_ServerCommandPutter_o* __this, uint8_t pokeID, Dpr_Battle_Logic_PokeTypePair_o nextType, int32_t exTypeCause, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__ExPokeType (Dpr_Battle_Logic_ServerCommandPutter_o* __this, uint8_t pokeID, uint8_t exType, int32_t exTypeCause, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__ChangeTokusei (Dpr_Battle_Logic_ServerCommandPutter_o* __this, uint8_t pokeID, int32_t tokusei, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__SetBaseStatus (Dpr_Battle_Logic_ServerCommandPutter_o* __this, uint8_t pokeID, int32_t valueID, uint16_t value, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__SetWeight (Dpr_Battle_Logic_ServerCommandPutter_o* __this, uint8_t pokeID, uint16_t weight, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__ClearForOut (Dpr_Battle_Logic_ServerCommandPutter_o* __this, uint8_t pokeID, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__ClearForDead (Dpr_Battle_Logic_ServerCommandPutter_o* __this, uint8_t pokeID, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__CreateMigawari (Dpr_Battle_Logic_ServerCommandPutter_o* __this, uint8_t pokeID, uint16_t migawariHP, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__DeleteMigawari (Dpr_Battle_Logic_ServerCommandPutter_o* __this, uint8_t pokeID, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__Relive (Dpr_Battle_Logic_ServerCommandPutter_o* __this, uint8_t pokeID, uint16_t recoverHP, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__TurnEnd (Dpr_Battle_Logic_ServerCommandPutter_o* __this, uint8_t pokeID, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__TurnCheck_WazaSick (Dpr_Battle_Logic_ServerCommandPutter_o* __this, uint8_t pokeID, int32_t sick, bool* isSickValid, Dpr_Battle_Logic_BTL_SICKCONT_o* pOldContDest, bool* fCured, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__UpdateWazaProcResult (Dpr_Battle_Logic_ServerCommandPutter_o* __this, uint8_t pokeID, uint8_t actTargetPos, uint8_t actWazaType, bool isWazaEffective, int32_t actWaza, int32_t orgWaza, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__TokWin_In (Dpr_Battle_Logic_ServerCommandPutter_o* __this, uint8_t pokeID, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__TokWin_In (Dpr_Battle_Logic_ServerCommandPutter_o* __this, Dpr_Battle_Logic_BTL_POKEPARAM_o* poke, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__TokWin_Out (Dpr_Battle_Logic_ServerCommandPutter_o* __this, uint8_t pokeID, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__TokWin_Out (Dpr_Battle_Logic_ServerCommandPutter_o* __this, Dpr_Battle_Logic_BTL_POKEPARAM_o* poke, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__PublishClientInformation_AppeardPokemon (Dpr_Battle_Logic_ServerCommandPutter_o* __this, Dpr_Battle_Logic_BTL_POKEPARAM_o** appeardPoke, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__PublishClientInformation_HavePokemonItem (Dpr_Battle_Logic_ServerCommandPutter_o* __this, Dpr_Battle_Logic_BTL_POKEPARAM_o* poke, bool haveItem, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__WazaEffect (Dpr_Battle_Logic_ServerCommandPutter_o* __this, Dpr_Battle_Logic_WazaParam_o** wazaParam, Dpr_Battle_Logic_WazaEffectParams_o* wazaEffect, Dpr_Battle_Logic_WazaEffectReservedPos_o** reservedQueuePos, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__WazaSubEffect (Dpr_Battle_Logic_ServerCommandPutter_o* __this, Dpr_Battle_Logic_WazaEffectParams_o* wazaEffect, uint16_t reservedQuePos, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__HaseiWazaEffect (Dpr_Battle_Logic_ServerCommandPutter_o* __this, Dpr_Battle_Logic_BTL_POKEPARAM_o* poke, int32_t waza, uint8_t targetPos, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__WazaDamagePlural (Dpr_Battle_Logic_ServerCommandPutter_o* __this, Dpr_Battle_Logic_BTL_POKEPARAM_o* attacker, Dpr_Battle_Logic_WazaParam_o* wazaParam, uint32_t targetCount, Dpr_Battle_Logic_BTL_POKEPARAM_array* targets, Pml_Battle_TypeAffinity_AffinityID_array* affinityArray, System_UInt16_array* damage, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__InsertWazaInfo (Dpr_Battle_Logic_ServerCommandPutter_o* __this, uint8_t pokeID, bool isTokuseiWindowDisplay, Dpr_Battle_Logic_StrParam_o** message, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__SetBattleFlag (Dpr_Battle_Logic_ServerCommandPutter_o* __this, uint16_t flag, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__RemoveBattleFlag (Dpr_Battle_Logic_ServerCommandPutter_o* __this, uint16_t flag, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__IncBattleCount (Dpr_Battle_Logic_ServerCommandPutter_o* __this, uint8_t counterID, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__DecBattleCount (Dpr_Battle_Logic_ServerCommandPutter_o* __this, uint8_t counterID, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__IncBattleCount (Dpr_Battle_Logic_ServerCommandPutter_o* __this, uint8_t counterID, int32_t clientID, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__IncBattleCount (Dpr_Battle_Logic_ServerCommandPutter_o* __this, uint8_t counterID, int32_t side, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__SetActionRecord (Dpr_Battle_Logic_ServerCommandPutter_o* __this, uint8_t pokeID, uint8_t actionID, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__NotifyPGLRecord (Dpr_Battle_Logic_ServerCommandPutter_o* __this, Dpr_Battle_Logic_BTL_POKEPARAM_o* defPoke, Dpr_Battle_Logic_PGLRecord_RecParam_o* pPGLParam, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__AddEffort (Dpr_Battle_Logic_ServerCommandPutter_o* __this, uint8_t pokeID, uint8_t hp, uint8_t pow, uint8_t def, uint8_t sp_pow, uint8_t sp_def, uint8_t agi, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__AddEffort_G (Dpr_Battle_Logic_ServerCommandPutter_o* __this, uint8_t pokeID, uint8_t value, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__SwapPokePos (Dpr_Battle_Logic_ServerCommandPutter_o* __this, uint8_t clientID, uint8_t pos1, uint8_t pos2, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__Act_SwapPokePos (Dpr_Battle_Logic_ServerCommandPutter_o* __this, uint8_t clientID, uint8_t pos1, uint8_t pos2, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__UpdateWazaNo (Dpr_Battle_Logic_ServerCommandPutter_o* __this, uint8_t pokeID, uint8_t wazaIdx, int32_t wazaNo, uint8_t ppMax, bool fPermanent, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__IncWazaUsedCount (Dpr_Battle_Logic_ServerCommandPutter_o* __this, uint8_t pokeID, uint8_t wazaIdx, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__IncWazaKillCount (Dpr_Battle_Logic_ServerCommandPutter_o* __this, uint8_t pokeID, uint8_t wazaIdx, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__SetWazaUsedFlag (Dpr_Battle_Logic_ServerCommandPutter_o* __this, uint8_t pokeID, uint8_t wazaIdx, const MethodInfo* method_info);
bool Dpr_Battle_Logic_ServerCommandPutter__RecoverRank (Dpr_Battle_Logic_ServerCommandPutter_o* __this, uint8_t pokeID, const MethodInfo* method_info);
bool Dpr_Battle_Logic_ServerCommandPutter__RankUpReset (Dpr_Battle_Logic_ServerCommandPutter_o* __this, uint8_t pokeID, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__RankReset (Dpr_Battle_Logic_ServerCommandPutter_o* __this, uint8_t pokeID, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__RankSet8 (Dpr_Battle_Logic_ServerCommandPutter_o* __this, uint8_t pokeID, uint8_t atk, uint8_t def, uint8_t sp_atk, uint8_t sp_def, uint8_t agi, uint8_t hit, uint8_t avoid, uint8_t critical, const MethodInfo* method_info);
bool Dpr_Battle_Logic_ServerCommandPutter__AddCriticalRank (Dpr_Battle_Logic_ServerCommandPutter_o* __this, uint8_t pokeID, uint8_t volume, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__StartWeather (Dpr_Battle_Logic_ServerCommandPutter_o* __this, uint8_t weather, uint8_t turn, uint8_t turnUpCount, uint8_t causePokeID, uint8_t cause, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__EndWeather (Dpr_Battle_Logic_ServerCommandPutter_o* __this, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__Act_EndWeather (Dpr_Battle_Logic_ServerCommandPutter_o* __this, uint8_t weather, const MethodInfo* method_info);
uint8_t Dpr_Battle_Logic_ServerCommandPutter__TurnCheckWeather (Dpr_Battle_Logic_ServerCommandPutter_o* __this, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__UpdateIllusion (Dpr_Battle_Logic_ServerCommandPutter_o* __this, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__UpdateIllusion (Dpr_Battle_Logic_ServerCommandPutter_o* __this, int32_t clientID, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__FakeDisable (Dpr_Battle_Logic_ServerCommandPutter_o* __this, uint8_t pokeID, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__Act_FakeDisable (Dpr_Battle_Logic_ServerCommandPutter_o* __this, uint8_t pokeID, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__Act_FriendshipEffect (Dpr_Battle_Logic_ServerCommandPutter_o* __this, uint8_t pokeID, int32_t effect, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__Act_FriendshipEffectWithMsg (Dpr_Battle_Logic_ServerCommandPutter_o* __this, uint8_t pokeID, int32_t effect, int32_t msgType, uint16_t strID, uint16_t arg1, uint16_t arg2, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__RaidBoss_DecReinforceTurn (Dpr_Battle_Logic_ServerCommandPutter_o* __this, uint8_t pokeID, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__RaidBoss_SetReinforceTurn (Dpr_Battle_Logic_ServerCommandPutter_o* __this, uint8_t pokeID, uint8_t turn, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__RaidBoss_IncAngryLevel (Dpr_Battle_Logic_ServerCommandPutter_o* __this, uint8_t pokeID, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__RaidBoss_GWazaUseSchedule_DecTurn (Dpr_Battle_Logic_ServerCommandPutter_o* __this, uint8_t pokeID, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__RaidBoss_GWazaUseSchedule_SetUsed (Dpr_Battle_Logic_ServerCommandPutter_o* __this, uint8_t pokeID, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__RaidBoss_GWazaUseSchedule_Reset (Dpr_Battle_Logic_ServerCommandPutter_o* __this, uint8_t pokeID, uint8_t turn, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__Act_RaidBoss_GWallAppear (Dpr_Battle_Logic_ServerCommandPutter_o* __this, uint8_t pokeID, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__BreakGWall (Dpr_Battle_Logic_ServerCommandPutter_o* __this, uint8_t pokeID, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__AddGWallGauge (Dpr_Battle_Logic_ServerCommandPutter_o* __this, uint8_t pokeID, uint8_t value, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__SubGWallGauge (Dpr_Battle_Logic_ServerCommandPutter_o* __this, uint8_t pokeID, uint8_t value, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__InitGWallGauge (Dpr_Battle_Logic_ServerCommandPutter_o* __this, uint8_t pokeID, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__DecGWallRepairTurnCount (Dpr_Battle_Logic_ServerCommandPutter_o* __this, uint8_t pokeID, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__RepairGWall (Dpr_Battle_Logic_ServerCommandPutter_o* __this, uint8_t pokeID, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__RaidBattleStatus_IncAllDeadCount (Dpr_Battle_Logic_ServerCommandPutter_o* __this, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__RaidBattleStatus_IncTurnCountAfterAllDead (Dpr_Battle_Logic_ServerCommandPutter_o* __this, int32_t clientID, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__RaidBattleStatus_ResetTurnCountAfterAllDead (Dpr_Battle_Logic_ServerCommandPutter_o* __this, int32_t clientID, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__Act_RaidResult (Dpr_Battle_Logic_ServerCommandPutter_o* __this, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__StartGMode (Dpr_Battle_Logic_ServerCommandPutter_o* __this, uint8_t pokeID, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__EndGMode (Dpr_Battle_Logic_ServerCommandPutter_o* __this, uint8_t pokeID, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__IncGModeTurnCount (Dpr_Battle_Logic_ServerCommandPutter_o* __this, uint8_t pokeID, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__Act_StartGMode (Dpr_Battle_Logic_ServerCommandPutter_o* __this, uint8_t pokeID, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__Act_EndGMode (Dpr_Battle_Logic_ServerCommandPutter_o* __this, uint8_t pokeID, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__IncGGauge (Dpr_Battle_Logic_ServerCommandPutter_o* __this, int32_t clientID, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__EmptyGGauge (Dpr_Battle_Logic_ServerCommandPutter_o* __this, int32_t clientID, const MethodInfo* method_info);
bool Dpr_Battle_Logic_ServerCommandPutter__TransferGRights (Dpr_Battle_Logic_ServerCommandPutter_o* __this, int32_t side, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__IncGRightsTurnCount (Dpr_Battle_Logic_ServerCommandPutter_o* __this, int32_t side, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__InvalidateGRights (Dpr_Battle_Logic_ServerCommandPutter_o* __this, int32_t clientID, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__Act_GrightsGet (Dpr_Battle_Logic_ServerCommandPutter_o* __this, int32_t clientID, bool canAnotherClientDisplayMessage, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__Act_TurnStart (Dpr_Battle_Logic_ServerCommandPutter_o* __this, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__Act_Dead (Dpr_Battle_Logic_ServerCommandPutter_o* __this, uint8_t pokeID, bool isKillCountEffect, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__Act_TameWazaHide (Dpr_Battle_Logic_ServerCommandPutter_o* __this, uint8_t pokeID, bool hideFlag, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__Act_CreateMigawari (Dpr_Battle_Logic_ServerCommandPutter_o* __this, uint8_t pos, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__Act_HideMessageWindow (Dpr_Battle_Logic_ServerCommandPutter_o* __this, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__Act_ChangeGround (Dpr_Battle_Logic_ServerCommandPutter_o* __this, uint8_t ground, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__Act_IchigekiWaza (Dpr_Battle_Logic_ServerCommandPutter_o* __this, uint8_t targetID, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__Act_WazaDamage (Dpr_Battle_Logic_ServerCommandPutter_o* __this, uint8_t targetID, int32_t affAbout, int32_t wazaID, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__Act_WazaEffect (Dpr_Battle_Logic_ServerCommandPutter_o* __this, uint8_t atPokePos, uint8_t defPokePos, int32_t waza, uint8_t wazaType, uint8_t arg, uint8_t pluralHitIndex, bool bSyncDamageEffect, bool isGShockOccur, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__Act_EffectSimple (Dpr_Battle_Logic_ServerCommandPutter_o* __this, uint16_t effectNo, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__Act_EffectByVector (Dpr_Battle_Logic_ServerCommandPutter_o* __this, uint8_t pos_from, uint8_t pos_to, uint16_t effectNo, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__Act_Hensin (Dpr_Battle_Logic_ServerCommandPutter_o* __this, uint8_t userID, uint8_t targetID, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__Op_Hensin (Dpr_Battle_Logic_ServerCommandPutter_o* __this, uint8_t userID, uint8_t targetID, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__Act_MemberIn (Dpr_Battle_Logic_ServerCommandPutter_o* __this, uint8_t clientID, uint8_t posIdx, uint8_t memberIdx, bool fPutMsg, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__Act_MemberOut (Dpr_Battle_Logic_ServerCommandPutter_o* __this, uint8_t pos, uint16_t effectNo, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__Act_MigawariDamage (Dpr_Battle_Logic_ServerCommandPutter_o* __this, uint8_t defPokeID, int32_t affine, int32_t waza, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__Act_MigawariDelete (Dpr_Battle_Logic_ServerCommandPutter_o* __this, uint8_t pos, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__Act_BallThrow (Dpr_Battle_Logic_ServerCommandPutter_o* __this, uint8_t userPos, uint8_t targetPos, uint8_t yureCnt, bool fSuccess, bool fZukanRegister, bool fCritical, uint16_t ballItemID, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__Act_BallThrow_Forbidden (Dpr_Battle_Logic_ServerCommandPutter_o* __this, uint8_t targetPos, uint16_t ballItemID, uint8_t cause, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__Act_BallThrow_AfterCaptured (Dpr_Battle_Logic_ServerCommandPutter_o* __this, Dpr_Battle_Logic_POKE_CAPTURED_CONTEXT_o** context, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__Act_PlayWinBGM (Dpr_Battle_Logic_ServerCommandPutter_o* __this, uint32_t BGMNo, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__ActOp_SkillSwap (Dpr_Battle_Logic_ServerCommandPutter_o* __this, uint8_t pokeID_1, uint8_t pokeID_2, int32_t tokID_1, int32_t tokID_2, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__ActOp_ChangeTokusei (Dpr_Battle_Logic_ServerCommandPutter_o* __this, uint8_t pokeID, int32_t tokuseiNo, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__Act_AddExp_InitParam (Dpr_Battle_Logic_ServerCommandPutter_o* __this, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__Act_AddExp_AddParam (Dpr_Battle_Logic_ServerCommandPutter_o* __this, uint8_t pokeID, uint32_t exp, uint32_t effort_hp, uint32_t effort_pow, uint32_t effort_def, uint32_t effort_sp_pow, uint32_t effort_sp_def, uint32_t effort_agi, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__Act_AddExp (Dpr_Battle_Logic_ServerCommandPutter_o* __this, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__Op_AddExp (Dpr_Battle_Logic_ServerCommandPutter_o* __this, uint8_t pokeID, uint32_t exp, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__AddEscapeInfo (Dpr_Battle_Logic_ServerCommandPutter_o* __this, int32_t clientID, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__ReserveUseItemCommands (Dpr_Battle_Logic_ServerCommandPutter_o* __this, Dpr_Battle_Logic_ServerCommandPutter_UseItemCommandParam_o* pParam, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__PutUseItemCommands (Dpr_Battle_Logic_ServerCommandPutter_o* __this, Dpr_Battle_Logic_ServerCommandPutter_UseItemCommandParam_o** param, const MethodInfo* method_info);
bool Dpr_Battle_Logic_ServerCommandPutter__AddWazaHandler (Dpr_Battle_Logic_ServerCommandPutter_o* __this, uint8_t pokeID, int32_t waza, uint32_t subPri, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__RemoveWazaHandler (Dpr_Battle_Logic_ServerCommandPutter_o* __this, uint8_t pokeID, int32_t waza, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__RemoveForceWazaHandler (Dpr_Battle_Logic_ServerCommandPutter_o* __this, uint8_t pokeID, int32_t waza, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__RemoveForceAllWazaHandler (Dpr_Battle_Logic_ServerCommandPutter_o* __this, uint8_t pokeID, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__AddTokuseiHandler (Dpr_Battle_Logic_ServerCommandPutter_o* __this, uint8_t pokeID, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__RemoveTokuseiHandler (Dpr_Battle_Logic_ServerCommandPutter_o* __this, uint8_t pokeID, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__SwapTokuseiHandler (Dpr_Battle_Logic_ServerCommandPutter_o* __this, uint8_t pokeID1, uint8_t pokeID2, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__AddItemHandler (Dpr_Battle_Logic_ServerCommandPutter_o* __this, uint8_t pokeID, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__RemoveItemHandler (Dpr_Battle_Logic_ServerCommandPutter_o* __this, uint8_t pokeID, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__AddPosHandler (Dpr_Battle_Logic_ServerCommandPutter_o* __this, int32_t effect, uint8_t pos, uint8_t pokeID, System_Int32_array* param, uint8_t param_cnt, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__RemovePosHandler (Dpr_Battle_Logic_ServerCommandPutter_o* __this, int32_t effect, uint8_t pos, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__AddSideHandler (Dpr_Battle_Logic_ServerCommandPutter_o* __this, int32_t side, int32_t sideEffect, Dpr_Battle_Logic_BTL_SICKCONT_o* contParam, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__RemoveSideHandler (Dpr_Battle_Logic_ServerCommandPutter_o* __this, int32_t side, int32_t sideEffect, const MethodInfo* method_info);
bool Dpr_Battle_Logic_ServerCommandPutter__SleepSideHandler (Dpr_Battle_Logic_ServerCommandPutter_o* __this, int32_t side, int32_t sideEffect, const MethodInfo* method_info);
bool Dpr_Battle_Logic_ServerCommandPutter__WakeSideHandler (Dpr_Battle_Logic_ServerCommandPutter_o* __this, int32_t side, int32_t sideEffect, const MethodInfo* method_info);
bool Dpr_Battle_Logic_ServerCommandPutter__AddFieldHandler (Dpr_Battle_Logic_ServerCommandPutter_o* __this, int32_t effect, uint8_t sub_param, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__RemoveFieldHandler (Dpr_Battle_Logic_ServerCommandPutter_o* __this, int32_t effect, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__AddDefaultPowerUpHandler (Dpr_Battle_Logic_ServerCommandPutter_o* __this, uint8_t pokeID, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__RemoveDefaultPowerUpHandler (Dpr_Battle_Logic_ServerCommandPutter_o* __this, uint8_t pokeID, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__AddRaidBossHandler (Dpr_Battle_Logic_ServerCommandPutter_o* __this, uint8_t pokeID, int32_t handlerType, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__RemoveRaidBossHandler (Dpr_Battle_Logic_ServerCommandPutter_o* __this, uint8_t pokeID, int32_t handlerType, const MethodInfo* method_info);
void Dpr_Battle_Logic_ServerCommandPutter__SafariAct (Dpr_Battle_Logic_ServerCommandPutter_o* __this, uint8_t pokeID, uint8_t param0, uint8_t param1, const MethodInfo* method_info);
